{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/terrain/constants.ts","webpack:///./src/ts/terrain/terrain.worker.ts","webpack:///./src/ts/terrain/utils.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","heights","water","sand","plainsMin","plainsMax","mountainFactor","mountainMod","chunkSize","x","y","chunkRange","noiseSeed","maximumTrees","maximumGrass","importScripts","ctx","self","iterateFromCenter","maximumItems","onPosition","itemCounter","iterSize","lastIter","j","noise","seed","addEventListener","event","data","size","xPos","yPos","height","pa","Float32Array","hVerts","wVerts","landTextures","getHeight","getLandTexture","postMessage","type","buffer","createChunk","grassDensity","grassNumber","matrix","THREE","Matrix4","position","Vector3","rotation","Euler","quaternion","Quaternion","scale","grassTextures","grassMatrices","grassMatrixCount","grassTextureCount","maxDistance","simplex2","set","z","Math","PI","setFromEuler","compose","toArray","forEach","element","abs","distance","max","updateGrass","treeNumber","treeMatrices","treeMatrixCount","forestArea","updateTrees","heightAdjustment","plainsHeight","pow","snowMod","gravelMod","greenColor","Color","brownColor","geo","Geometry","level1","ConeGeometry","faces","f","color","translate","merge","level2","level3","trunk","CylinderGeometry","bufferGeo","BufferGeometry","fromGeometry"],"mappings":"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","file":"worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","export const heights = {\r\n    water: 4.3,\r\n    sand: 5.0,\r\n    plainsMin: 4,\r\n    plainsMax: 35,\r\n    mountainFactor : 1.6\r\n}\r\nexport const mountainMod = heights.plainsMax - (heights.plainsMin + ((heights.plainsMax - heights.plainsMin) / 4));\r\nexport const chunkSize = { x: 128, y: 128 };\r\nexport const chunkRange = 3;\r\nexport const noiseSeed = 1024;\r\nexport const maximumTrees = 500;\r\nexport const maximumGrass = 2000;","importScripts('js/three.min.js', 'js/perlin.js');\r\n\r\nconst ctx: Worker = self as any;\r\n\r\nimport {noiseSeed, mountainMod, heights} from './constants';\r\nimport {getHeight, getLandTexture} from './utils';\r\n\r\nnoise.seed(noiseSeed);\r\n\r\nfunction iterateFromCenter(x : number, y : number, maximumItems : number, onPosition : (x : number, y : number) => number) {\r\n    let itemCounter = 0;\r\n    let iterSize = 0;\r\n    let lastIter = 0;\r\n\r\n    while(itemCounter < maximumItems) {\r\n        iterSize++;\r\n        lastIter = iterSize - 1;\r\n        for (let j = -iterSize; j <= iterSize; j++ ) {\r\n            for (let i = -iterSize; i <= iterSize; i++ ) {\r\n                if (itemCounter >= maximumItems)\r\n                    return;\r\n                if (j > -lastIter && j < lastIter && i > -lastIter && i < lastIter) {\r\n                    i = lastIter;\r\n                }\r\n                if (j < -lastIter || j > lastIter || i < -lastIter || i > lastIter) {\r\n                    itemCounter += onPosition(x + j, y + i);\r\n                }\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\nfunction updateGrass(x : number, y : number, grassDensity : number, grassNumber : number) {\r\n\r\n    let matrix = new THREE.Matrix4();\r\n    let position = new THREE.Vector3();\r\n    let rotation = new THREE.Euler();\r\n    let quaternion = new THREE.Quaternion();\r\n    let scale = new THREE.Vector3(1, 1, 1);\r\n    let grassTextures = new Float32Array(grassNumber);\r\n    let grassMatrices = new Float32Array(grassNumber * 16);\r\n    let height : number;\r\n    let grassMatrixCount = 0;\r\n    let grassTextureCount = 0;\r\n    let maxDistance = 0;\r\n\r\n    iterateFromCenter(x , y, grassNumber, function(xPos, yPos) {\r\n        xPos = x + ((x - xPos) * grassDensity);\r\n        yPos = y + ((y - yPos) * grassDensity);\r\n        if (noise.simplex2(xPos / 5, yPos / 5) > 0.3) {\r\n            height = getHeight(xPos, yPos);\r\n            if (height > heights.sand + 1 && height < mountainMod) {\r\n                scale.set(1, 1, 1);\r\n                position.x = xPos + noise.simplex2(xPos + 2, yPos + 2);\r\n                position.z = yPos + noise.simplex2(xPos + 4, yPos + 4);\r\n                height = getHeight(position.x, position.z);\r\n                position.y = height + 0.25;\r\n                rotation.y = noise.simplex2(xPos, yPos) * Math.PI * 10;\r\n                quaternion.setFromEuler(rotation);\r\n                matrix.compose(position, quaternion, scale);\r\n                matrix.toArray().forEach(element => {\r\n                    grassMatrices[grassMatrixCount++] = element;\r\n                });\r\n                grassTextures[grassTextureCount++] = Math.abs(noise.simplex2(xPos, yPos));\r\n                let distance = Math.max(Math.abs(x - xPos), Math.abs(y - yPos));\r\n                if (distance > maxDistance) maxDistance = distance;\r\n                return 1;\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    ctx.postMessage({type:\"grass\", maxDistance : maxDistance, grassMatrices : grassMatrices.buffer, grassTextures : grassTextures.buffer}, [grassMatrices.buffer, grassTextures.buffer]);\r\n}\r\n\r\nfunction updateTrees(x : number, y : number, treeNumber : number) {\r\n    let matrix = new THREE.Matrix4();\r\n    let position = new THREE.Vector3();\r\n    let rotation = new THREE.Euler();\r\n    let quaternion = new THREE.Quaternion();\r\n    let scale = new THREE.Vector3(1, 1, 1);\r\n    let treeMatrices = new Float32Array(treeNumber * 16);\r\n    let height : number;\r\n    let treeMatrixCount = 0;\r\n    let maxDistance = 0;\r\n    iterateFromCenter(x, y, treeNumber, function(xPos, yPos) {\r\n        let forestArea = noise.simplex2(xPos / 45, yPos / 45);\r\n        if (forestArea > 0.4 && Math.abs(noise.simplex2(xPos * 2, yPos * 2)) > 0.9) {\r\n            height = getHeight(xPos, yPos);\r\n            if (height > heights.sand + 1 && height < mountainMod) {\r\n                let size = 0.4 + forestArea;\r\n                scale.set(size, size, size);\r\n                position.x = xPos;\r\n                position.z = yPos;\r\n                position.y = height - 0.5;\r\n                rotation.y = noise.simplex2(xPos / 5, yPos / 5) * Math.PI * 2;\r\n                quaternion.setFromEuler(rotation);\r\n                matrix.compose(position, quaternion, scale);\r\n                matrix.toArray().forEach(element => {\r\n                    treeMatrices[treeMatrixCount++] = element;\r\n                });\r\n                let distance = Math.max(Math.abs(x - xPos), Math.abs(y - yPos));\r\n                if (distance > maxDistance) maxDistance = distance;\r\n                return 1;\r\n            }\r\n        }\r\n        return 0;\r\n    });\r\n\r\n    ctx.postMessage({type:\"tree\", maxDistance:maxDistance, treeMatrices : treeMatrices.buffer}, [treeMatrices.buffer]);\r\n}\r\n\r\nfunction createChunk(x : number, y : number, size : number) {\r\n    let pa = new Float32Array((size + 1) * (size + 1) * 3);\r\n    let hVerts = size + 1;\r\n    let wVerts = size + 1;\r\n    let landTextures = new Float32Array((size + 1) * (size + 1));\r\n\r\n    let xPos : number, yPos : number, height : number;\r\n\r\n    for (let j = 0; j < hVerts; j++) {\r\n        for (let i = 0; i < wVerts; i++) {\r\n            xPos = j - (size) / 2 + x;\r\n            yPos = i - (size) / 2 + y;\r\n            pa[3 * (j * wVerts + i)] = xPos;\r\n            pa[3 * (j * wVerts + i) + 2] = yPos;\r\n            height = getHeight(xPos, yPos);\r\n            pa[3 * (j * wVerts + i) + 1] = height;\r\n            landTextures[j * wVerts + i] = getLandTexture(xPos, yPos, height);\r\n        }\r\n    }\r\n    ctx.postMessage({type:\"land\", x: x, y: y, pa : pa.buffer, landTextures : landTextures.buffer, size : size}, [pa.buffer, landTextures.buffer]);\r\n}\r\n\r\nctx.addEventListener(\"message\", function(event){\r\n    \r\n    switch (event.data[0]) {\r\n        case \"land\":\r\n            createChunk(event.data[1], event.data[2], event.data[3]);\r\n            break;\r\n        case \"grass\":\r\n            updateGrass(event.data[1], event.data[2], event.data[3], event.data[4]);\r\n            break;\r\n        case \"tree\":\r\n            updateTrees(event.data[1], event.data[2], event.data[3])\r\n            break;\r\n        case \"seed\":\r\n            noise.seed(event.data[1]);\r\n            break;\r\n    }\r\n});\r\n\r\n\r\nexport default {} as typeof Worker & (new () => Worker);","import {heights, mountainMod} from './constants';\r\n\r\nconst heightAdjustment = heights.plainsMin + ((heights.plainsMax - heights.plainsMin) / 4);\r\n\r\nexport function getHeight(x : number, y : number) {\r\n    let height =\r\n        0.5 * noise.simplex2(x / 8,   y / 8) +\r\n        2   * noise.simplex2(x / 32,  y / 32) +\r\n        10  * noise.simplex2(x / 100, y / 100) +\r\n        32  * noise.simplex2(x / 200, y / 200) +\r\n        32  * noise.simplex2(x / 500, y / 500) +\r\n        24  * noise.simplex2(x / 900, y / 900);\r\n\r\n    height += 30;\r\n        \r\n    let plainsHeight = heights.plainsMin + ((height - heights.plainsMin) / 4);\r\n\r\n    if (height > heights.plainsMax) {\r\n        return Math.pow(plainsHeight - heightAdjustment, heights.mountainFactor) + heightAdjustment;\r\n    }\r\n    return plainsHeight;\r\n}\r\n\r\nexport function getLandTexture(x : number, y : number, height : number) {\r\n\r\n    if (height < heights.water - 1) {\r\n        return 0 + Math.max(height - (heights.water - 2), 0);\r\n        // return 0;\r\n    }\r\n    if (height < heights.sand + 0.5){\r\n        return 1;\r\n    }\r\n    if (height < heights.sand + 1.0)\r\n        return 1 + 2 * (height - (heights.sand + 0.5));\r\n    let snowMod = 3 + (3 * noise.simplex2(x / 20, y / 20));\r\n    if (height > heights.plainsMax + 5 + snowMod)\r\n        return 4;\r\n    if (height > heights.plainsMax + 3.0 + snowMod)\r\n        return 3 + ((height - (heights.plainsMax + 3.0 + snowMod)) * 0.5);\r\n    let gravelMod = 5 + (5 * noise.simplex2(x / 15, y / 15));\r\n    if (height > mountainMod + gravelMod)\r\n        return 3;\r\n    if (height > mountainMod + gravelMod - 2) {\r\n        return 2 + ((height - (mountainMod + gravelMod - 2)) * 0.5);\r\n    }\r\n    return 2;\r\n}\r\n\r\nexport function getTreeGeometery() : THREE.BufferGeometry {\r\n    const greenColor = new THREE.Color(0x317830);\r\n    const brownColor = new THREE.Color(0x6e3626);\r\n    const geo = new THREE.Geometry();\r\n    const level1 = new THREE.ConeGeometry(0.8,1.6,10);\r\n    level1.faces.forEach(f => f.color.set(greenColor));\r\n    level1.translate(0,3.7,0);\r\n    geo.merge(level1);\r\n    const level2 = new THREE.ConeGeometry(1.0,1.8,10);\r\n    level2.faces.forEach(f => f.color.set(greenColor));\r\n    level2.translate(0,2.9,0);\r\n    geo.merge(level2);\r\n    const level3 = new THREE.ConeGeometry(1.2,2,10);\r\n    level3.faces.forEach(f => f.color.set(greenColor));\r\n    level3.translate(0,2,0);\r\n    geo.merge(level3);\r\n    const trunk = new THREE.CylinderGeometry(0.3,0.3,2);\r\n    trunk.translate(0, -0.0, 0);\r\n    trunk.faces.forEach(f => f.color.set(brownColor));\r\n    geo.merge(trunk);\r\n    let bufferGeo = new THREE.BufferGeometry();\r\n    bufferGeo.fromGeometry(geo);\r\n    return bufferGeo;\r\n}\r\n\r\n// export function isWater(height : number) : boolean {\r\n//     return height < heights.water + 0.55;\r\n// }"],"sourceRoot":""}