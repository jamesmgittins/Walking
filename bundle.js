!function(e){var n={};function t(r){if(n[r])return n[r].exports;var i=n[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,t),i.l=!0,i.exports}t.m=e,t.c=n,t.d=function(e,n,r){t.o(e,n)||Object.defineProperty(e,n,{enumerable:!0,get:r})},t.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},t.t=function(e,n){if(1&n&&(e=t(e)),8&n)return e;if(4&n&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&n&&"string"!=typeof e)for(var i in e)t.d(r,i,function(n){return e[n]}.bind(null,i));return r},t.n=function(e){var n=e&&e.__esModule?function(){return e.default}:function(){return e};return t.d(n,"a",n),n},t.o=function(e,n){return Object.prototype.hasOwnProperty.call(e,n)},t.p="",t(t.s=3)}([function(e,n){e.exports=THREE},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.maximumGrass=n.maximumTrees=n.noiseSeed=n.chunkSize=n.mountainMod=n.heights=void 0,n.heights={water:4.3,sand:5,plainsMin:4,plainsMax:25},n.mountainMod=n.heights.plainsMax-(n.heights.plainsMin+(n.heights.plainsMax-n.heights.plainsMin)/4),n.chunkSize={x:128,y:128},n.noiseSeed=1024,n.maximumTrees=75,n.maximumGrass=1e3},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.getTreeGeometery=n.getLandTexture=n.getHeight=void 0;const r=t(1);n.getHeight=function(e,n){let t=25*noise.simplex2(e/100,n/100)+25+1.5*noise.simplex2(e/8,n/8)+30*noise.simplex2(e/1200,n/1200)+5,i=r.heights.plainsMin+(t-r.heights.plainsMin)/4;return t>r.heights.plainsMax?Math.pow(i,1.4)-13.5:i},n.getLandTexture=function(e,n,t){if(t<r.heights.water)return 0;if(t<r.heights.sand+.5)return 1;if(t<r.heights.sand+1)return 1+2*(t-(r.heights.sand+.5));let i=3+3*noise.simplex2(e/20,n/20);if(t>r.heights.plainsMax+3+i)return 4;if(t>r.heights.plainsMax+2+i)return t-(r.heights.plainsMax+2+i)+3;let a=5+5*noise.simplex2(e/15,n/15);return t>r.mountainMod+a?3:t>r.mountainMod+a-1?t-(r.mountainMod+a-1)+2:2},n.getTreeGeometery=function(){const e=new THREE.Color(2853674),n=new THREE.Color(5056285),t=new THREE.Geometry,r=new THREE.ConeGeometry(1,2,8);r.faces.forEach(n=>n.color.set(e)),r.translate(0,4,0),t.merge(r);const i=new THREE.ConeGeometry(1.2,2,8);i.faces.forEach(n=>n.color.set(e)),i.translate(0,3,0),t.merge(i);const a=new THREE.ConeGeometry(1.4,2,8);a.faces.forEach(n=>n.color.set(e)),a.translate(0,2,0),t.merge(a);const o=new THREE.CylinderGeometry(.3,.3,3);o.translate(0,-.5,0),o.faces.forEach(e=>e.color.set(n)),t.merge(o);let s=new THREE.BufferGeometry;return s.fromGeometry(t),s}},function(e,n,t){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t),Object.defineProperty(e,r,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.hasOwnProperty.call(e,t)&&r(n,e,t);return i(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),t(4);const o=a(t(0)),s=a(t(8)),c=a(t(11)),u=t(12),l=new o.Scene;let d=new s.Terrain(l,3);const f=new u.Controls,m=new c.MyCamera(l,f,d);f.camera=m;const h=new o.WebGLRenderer({antialias:!1});h.setSize(window.innerWidth,window.innerHeight);let p=new o.Color(6658234),g=new o.Color(6216);l.background=new o.Color(0,0,0),document.body.appendChild(h.domElement);let v=new o.SpotLight(16777181,.6,100,.8,.5,1);m.camera.add(v),v.position.set(0,0,3),v.target=m.camera;let _=new o.Group;l.add(_);let x=new o.DirectionalLight(15654365,.5);x.position.y=1e3,x.position.z=1e3,x.target=m.camera,_.add(x);var y=(new o.TextureLoader).load("img/sun.png"),b=new o.SpriteMaterial({map:y}),w=new o.Sprite(b);w.scale.multiplyScalar(500),_.add(w),w.position.copy(x.position);var M=(new o.TextureLoader).load("img/moon.png"),k=new o.SpriteMaterial({map:M}),S=new o.Sprite(k);S.scale.multiplyScalar(100),S.position.y=-1e3,S.position.z=-250,_.add(S);const L=1e5*Math.PI*2;let D=0;var C=0,T=0;let E=0,z=0;!function e(){requestAnimationFrame(e),function(){E=Date.now();let e=Math.min((E-z)/1e3,1);z=E,function(){let e=E/-1e5;_.rotation.z=e,_.position.x=m.camera.position.x,_.position.z=m.camera.position.z,_.position.y=100,D=E%L*24/L,D+=12,D>24&&(D-=24),f.flashLight?v.intensity=.6:v.intensity=0;let n=new o.Vector3;x.getWorldPosition(n);let t=0;t=Math.min((n.y+200)/1e3,1),l.background.setRGB(t*p.r+g.r,t*p.g+g.g,t*p.b+g.b)}(),function(){if(20==++C){var e=document.getElementById("fps"),n=document.getElementById("posX"),t=document.getElementById("posY"),r=document.getElementById("calls"),i=document.getElementById("speed"),a=document.getElementById("time");if(e){var o=1e3/((E-T)/20);e.innerText=Math.round(o).toString(),n.innerText=m.camera.position.x.toFixed(2),t.innerText=m.camera.position.z.toFixed(2)+" z:"+m.camera.position.y.toFixed(2),r.innerText=h.info.render.calls.toString(),i.innerText=m.speed.length().toFixed(2).toString(),a.innerText=(D<10?"0":"")+Math.floor(D)+":"+(Math.floor(D%1*60)<10?"0":"")+Math.floor(D%1*60),T=E,C=0}}}(),d.updateChunks(e,m.camera),m.handleCameraMove(e),h.render(l,m.camera)}()}(),window.onresize=function(){m.camera.aspect=window.innerWidth/window.innerHeight,m.camera.updateProjectionMatrix(),h.setSize(window.innerWidth,window.innerHeight)}},function(e,n,t){var r=t(5),i=t(6);"string"==typeof(i=i.__esModule?i.default:i)&&(i=[[e.i,i,""]]);var a={insert:"head",singleton:!1};r(i,a);e.exports=i.locals||{}},function(e,n,t){"use strict";var r,i=function(){return void 0===r&&(r=Boolean(window&&document&&document.all&&!window.atob)),r},a=function(){var e={};return function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}e[n]=t}return e[n]}}(),o=[];function s(e){for(var n=-1,t=0;t<o.length;t++)if(o[t].identifier===e){n=t;break}return n}function c(e,n){for(var t={},r=[],i=0;i<e.length;i++){var a=e[i],c=n.base?a[0]+n.base:a[0],u=t[c]||0,l="".concat(c," ").concat(u);t[c]=u+1;var d=s(l),f={css:a[1],media:a[2],sourceMap:a[3]};-1!==d?(o[d].references++,o[d].updater(f)):o.push({identifier:l,updater:g(f,n),references:1}),r.push(l)}return r}function u(e){var n=document.createElement("style"),r=e.attributes||{};if(void 0===r.nonce){var i=t.nc;i&&(r.nonce=i)}if(Object.keys(r).forEach((function(e){n.setAttribute(e,r[e])})),"function"==typeof e.insert)e.insert(n);else{var o=a(e.insert||"head");if(!o)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");o.appendChild(n)}return n}var l,d=(l=[],function(e,n){return l[e]=n,l.filter(Boolean).join("\n")});function f(e,n,t,r){var i=t?"":r.media?"@media ".concat(r.media," {").concat(r.css,"}"):r.css;if(e.styleSheet)e.styleSheet.cssText=d(n,i);else{var a=document.createTextNode(i),o=e.childNodes;o[n]&&e.removeChild(o[n]),o.length?e.insertBefore(a,o[n]):e.appendChild(a)}}function m(e,n,t){var r=t.css,i=t.media,a=t.sourceMap;if(i?e.setAttribute("media",i):e.removeAttribute("media"),a&&btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(a))))," */")),e.styleSheet)e.styleSheet.cssText=r;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(r))}}var h=null,p=0;function g(e,n){var t,r,i;if(n.singleton){var a=p++;t=h||(h=u(n)),r=f.bind(null,t,a,!1),i=f.bind(null,t,a,!0)}else t=u(n),r=m.bind(null,t,n),i=function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(t)};return r(e),function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap)return;r(e=n)}else i()}}e.exports=function(e,n){(n=n||{}).singleton||"boolean"==typeof n.singleton||(n.singleton=i());var t=c(e=e||[],n);return function(e){if(e=e||[],"[object Array]"===Object.prototype.toString.call(e)){for(var r=0;r<t.length;r++){var i=s(t[r]);o[i].references--}for(var a=c(e,n),u=0;u<t.length;u++){var l=s(t[u]);0===o[l].references&&(o[l].updater(),o.splice(l,1))}t=a}}}},function(e,n,t){(n=t(7)(!1)).push([e.i,"/* Styles go here. */\r\n\r\nhtml,\r\nbody {\r\n  margin: 0;\r\n  padding: 0;\r\n  font-family: Arial, Helvetica, sans-serif;\r\n}\r\n\r\ncanvas {\r\n  display: block;\r\n}",""]),e.exports=n},function(e,n,t){"use strict";e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t=function(e,n){var t=e[1]||"",r=e[3];if(!r)return t;if(n&&"function"==typeof btoa){var i=(o=r,s=btoa(unescape(encodeURIComponent(JSON.stringify(o)))),c="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),"/*# ".concat(c," */")),a=r.sources.map((function(e){return"/*# sourceURL=".concat(r.sourceRoot||"").concat(e," */")}));return[t].concat(a).concat([i]).join("\n")}var o,s,c;return[t].join("\n")}(n,e);return n[2]?"@media ".concat(n[2]," {").concat(t,"}"):t})).join("")},n.i=function(e,t,r){"string"==typeof e&&(e=[[null,e,""]]);var i={};if(r)for(var a=0;a<this.length;a++){var o=this[a][0];null!=o&&(i[o]=!0)}for(var s=0;s<e.length;s++){var c=[].concat(e[s]);r&&i[c[0]]||(t&&(c[2]?c[2]="".concat(t," and ").concat(c[2]):c[2]=t),n.push(c))}},n}},function(e,n,t){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t),Object.defineProperty(e,r,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.hasOwnProperty.call(e,t)&&r(n,e,t);return i(n,e),n},o=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(n,"__esModule",{value:!0}),n.Terrain=void 0;const s=a(t(0)),c=t(9),u=o(t(10)),l=t(1),d=t(2);noise.seed(l.noiseSeed);const f=(new s.TextureLoader).load("img/grass.png"),m=(new s.TextureLoader).load("img/grassblade.png"),h=(new s.TextureLoader).load("img/grassblade2.png"),p=(new s.TextureLoader).load("img/grassblade3.png"),g=(new s.TextureLoader).load("img/gravel.png"),v=(new s.TextureLoader).load("img/sand.png"),_=(new s.TextureLoader).load("img/water.png"),x=(new s.TextureLoader).load("img/snow.png");_.wrapS=s.MirroredRepeatWrapping,_.wrapT=s.MirroredRepeatWrapping,g.wrapS=x.wrapS=v.wrapS=f.wrapS=s.RepeatWrapping,g.wrapT=x.wrapT=v.wrapT=f.wrapT=s.RepeatWrapping,m.magFilter=g.magFilter=x.magFilter=v.magFilter=f.magFilter=s.NearestFilter;const y=s.UniformsUtils.merge([s.ShaderLib.phong.uniforms]);y.texture1={type:"t",value:_},y.time={type:"f",value:1},y.amp={type:"f",value:.004};const b=new s.ShaderMaterial({uniforms:y,vertexShader:c.MyShaders.WaterVertexShader,fragmentShader:c.MyShaders.WaterFragmentShader,lights:!0}),w=s.UniformsUtils.merge([s.ShaderLib.standard.uniforms]);w.grassTexture={type:"t",value:f},w.sandTexture={type:"t",value:v},w.snowTexture={type:"t",value:x},w.gravelTexture={type:"t",value:g};const M=s.UniformsUtils.merge([s.ShaderLib.standard.uniforms]);M.texture1={type:"t",value:m},M.texture2={type:"t",value:h},M.texture3={type:"t",value:p},M.time={type:"f",value:0},M.amp={type:"f",value:.5},M.roughness.value=1;const k=new s.ShaderMaterial({uniforms:w,vertexShader:c.MyShaders.LandVertexShader,fragmentShader:c.MyShaders.LandFragmentShader,lights:!0,side:s.BackSide});var S=new s.PlaneBufferGeometry(320,320,480,1),L=new s.Mesh(S,b);L.position.y=l.heights.water+.55,L.rotation.x=-.5*Math.PI;var D=new s.PlaneBufferGeometry(6400,6400,1,1),C=new s.Mesh(D,new s.MeshPhongMaterial({map:_}));C.position.y=l.heights.water+.5,C.rotation.x=-.5*Math.PI;class T{constructor(e,n){this.x=e,this.y=n,this.geo=new s.PlaneBufferGeometry(l.chunkSize.x,l.chunkSize.y,l.chunkSize.x,l.chunkSize.y),this.planeMesh=new s.Mesh(this.geo,k),this.discarded=!1}}n.Terrain=class{constructor(e,n){this.chunkRange=1,this.chunks=[],this.chunkMap=[],this.discardedChunks=[],this.lastCubeCenter={x:1,y:1},this.lastGrassCenter={x:0,y:0},this.chunkRange=n,this.group=new s.Group,e.add(this.group),this.waterGroup=new s.Group,this.waterGroup.add(C),this.waterGroup.add(L),this.group.add(this.waterGroup),this.terrainGroup=new s.Group,this.group.add(this.terrainGroup),this.grassMesh=function(){let e=new s.PlaneBufferGeometry(.5,.5);return new s.InstancedMesh(e,new s.ShaderMaterial({uniforms:M,side:s.DoubleSide,vertexShader:c.MyShaders.GrassVertexShader,fragmentShader:c.MyShaders.GrassFragmentShader,transparent:!0,alphaTest:.5,lights:!0}),l.maximumGrass)}(),this.terrainGroup.add(this.grassMesh),this.treeMesh=new s.InstancedMesh(d.getTreeGeometery(),new s.MeshLambertMaterial({vertexColors:!0,reflectivity:0}),l.maximumTrees),this.terrainGroup.add(this.treeMesh),this.terrainWorker=new u.default;let t=this;this.terrainWorker.onmessage=function(e){switch(e.data.type){case"grass":t.processGrass(e.data.grassMatrices,e.data.grassTextures,e.data.treeMatrices);break;case"land":t.processChunk(e.data.x,e.data.y,e.data.pa,e.data.landTextures)}}}isWater(e){return e<l.heights.water+.55}createChunkObject(e,n){if(this.discardedChunks.length>0){let t=this.discardedChunks.pop();return t.x=e,t.y=n,t.discarded=!1,t.processed=!1,t}let t=new T(e,n);return this.terrainGroup.add(t.planeMesh),t.processed=!1,t}fixChunkNormals(e){e.geo.computeBoundingSphere(),e.geo.computeVertexNormals();let n,t,r,i=l.chunkSize.x+1,a=l.chunkSize.y+1,o=e.geo.getAttribute("normal");if(this.chunkMap[e.x-l.chunkSize.x]&&this.chunkMap[e.x-l.chunkSize.x][e.y]&&(n=this.chunkMap[e.x-l.chunkSize.x][e.y],n.processed)){t=n.geo.getAttribute("normal");for(let e=0;e<a;e++)r=(i-1)*a+e,o.setXYZ(e,t.getX(r),t.getY(r),t.getZ(r))}if(this.chunkMap[e.x+l.chunkSize.x]&&this.chunkMap[e.x+l.chunkSize.x][e.y]&&(n=this.chunkMap[e.x+l.chunkSize.x][e.y],n.processed)){t=n.geo.getAttribute("normal");for(let e=0;e<a;e++)r=e,o.setXYZ((i-1)*a+e,t.getX(r),t.getY(r),t.getZ(r))}if(this.chunkMap[e.x]&&this.chunkMap[e.x][e.y+l.chunkSize.y]&&(n=this.chunkMap[e.x][e.y+l.chunkSize.y],n.processed)){t=n.geo.getAttribute("normal");for(let e=0;e<i;e++)r=e*a,o.setXYZ(e*a+(i-1),t.getX(r),t.getY(r),t.getZ(r))}if(this.chunkMap[e.x]&&this.chunkMap[e.x][e.y-l.chunkSize.y]&&(n=this.chunkMap[e.x][e.y-l.chunkSize.y],n.processed)){t=n.geo.getAttribute("normal");for(let e=0;e<i;e++)r=e*a+(i-1),o.setXYZ(e*a,t.getX(r),t.getY(r),t.getZ(r))}e.geo.getAttribute("position").needsUpdate=!0}processGrass(e,n,t){let r=new Float32Array(n);this.grassMesh.count=r.length,this.grassMesh.instanceMatrix.copyArray(new Float32Array(e)),this.grassMesh.geometry.setAttribute("tex",new s.InstancedBufferAttribute(r,1,!1,1)),this.grassMesh.instanceMatrix.needsUpdate=!0,this.treeMesh.instanceMatrix.copyArray(new Float32Array(t)),this.treeMesh.instanceMatrix.needsUpdate=!0}processChunk(e,n,t,r){let i=this.chunkMap[e][n];i.geo.setAttribute("position",new s.BufferAttribute(new Float32Array(t),3,!0)),i.geo.setAttribute("tex",new s.BufferAttribute(new Float32Array(r),1,!1)),this.fixChunkNormals(i),i.processed=!0}createChunk2(e,n){let t=this.createChunkObject(e,n);this.terrainWorker.postMessage(["land",e,n]),this.chunks.push(t),this.chunkMap[e]||(this.chunkMap[e]=[]),this.chunkMap[e][n]=t}destroyChunk(e){e.discarded=!0,this.discardedChunks.push(e),delete this.chunkMap[e.x][e.y],0==Object.keys(this.chunkMap[e.x]).length&&delete this.chunkMap[e.x]}updateChunks(e,n){y.time.value+=60*e,M.time.value+=60*e;let t=Math.round(n.position.x),r=Math.round(n.position.z);if((Math.abs(t-this.waterGroup.position.x)>64||Math.abs(r-this.waterGroup.position.z)>64)&&(this.waterGroup.position.x=t,this.waterGroup.position.z=r),this.lastCubeCenter.x==t&&this.lastCubeCenter.y==r)return;(Math.abs(t-this.lastGrassCenter.x)>3||Math.abs(r-this.lastGrassCenter.y)>3)&&(this.terrainWorker.postMessage(["grass",t,r,100,200]),this.lastGrassCenter.x=t,this.lastGrassCenter.y=r);let i=Math.round(t/l.chunkSize.x)*l.chunkSize.x,a=Math.round(r/l.chunkSize.y)*l.chunkSize.y;var o=i-this.chunkRange*l.chunkSize.x,s=i+this.chunkRange*l.chunkSize.x,c=a-this.chunkRange*l.chunkSize.y;let u=a+this.chunkRange*l.chunkSize.y;for(var d=0;d<this.chunks.length;d++)if(this.chunks[d].x<o||this.chunks[d].x>s||this.chunks[d].y<c||this.chunks[d].y>u)return this.destroyChunk(this.chunks[d]),void this.chunks.splice(d,1);for(d=-this.chunkRange;d<=this.chunkRange;d++)for(var f=i+d*l.chunkSize.x,m=-this.chunkRange;m<=this.chunkRange;m++){var h=a+m*l.chunkSize.y;if(!this.chunkMap[f]||!this.chunkMap[f][h])return void this.createChunk2(f,h)}this.lastCubeCenter.x=t,this.lastCubeCenter.y=r}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.MyShaders=void 0,n.MyShaders={GrassVertexShader:"\n          #define MYLAND\n          varying vec3 vLightFront;\n          varying vec3 vIndirectFront;\n          #ifdef DOUBLE_SIDED\n              varying vec3 vLightBack;\n              varying vec3 vIndirectBack;\n          #endif\n          #include <common>\n          #include <uv_pars_vertex>\n          #include <uv2_pars_vertex>\n          #include <envmap_pars_vertex>\n          #include <bsdfs>\n          #include <lights_pars_begin>\n          #include <color_pars_vertex>\n          #include <fog_pars_vertex>\n          #include <morphtarget_pars_vertex>\n          #include <skinning_pars_vertex>\n          #include <shadowmap_pars_vertex>\n          #include <logdepthbuf_pars_vertex>\n          #include <clipping_planes_pars_vertex>\n\n          varying vec3 vUv;\n          attribute float tex;\n          varying float texture;\n          uniform float time;\n          uniform float amp;\n\n          void main() {\n\n              vUv = position;\n              texture = tex;\n      \n              #include <uv_vertex>\n              #include <uv2_vertex>\n              #include <color_vertex>\n              #include <beginnormal_vertex>\n              #include <morphnormal_vertex>\n              #include <skinbase_vertex>\n              #include <skinnormal_vertex>\n              #include <defaultnormal_vertex>\n              #include <begin_vertex>\n              #include <morphtarget_vertex>\n              #include <skinning_vertex>\n              \n              vec4 mvPosition = vec4( transformed, 1.0 );\n              if (position.y > 0.0) {\n                float freq = 0.2 * min(max(instanceMatrix[0].x, 0.7), 1.8);\n                float angle = ((time * 0.2) + (position.y * 8.0)) * freq;\n                angle += instanceMatrix[3].x;\n                mvPosition.z += cos(angle) * amp * freq;\n              }\n\n              #ifdef USE_INSTANCING\n                mvPosition = instanceMatrix * mvPosition;\n              #endif\n\n              mvPosition = modelViewMatrix * mvPosition;              \n              gl_Position = projectionMatrix * mvPosition;\n              #include <logdepthbuf_vertex>\n              #include <clipping_planes_vertex>\n              #include <worldpos_vertex>\n              #include <envmap_vertex>\n              #include <lights_lambert_vertex>\n              #include <shadowmap_vertex>\n              #include <fog_vertex>\n\n              // vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\n\t            // gl_Position = projectionMatrix * modelViewPosition;\n          }\n      ",GrassFragmentShader:"\n          uniform vec3 diffuse;\n          uniform vec3 emissive;\n          uniform float opacity;\n          varying vec3 vLightFront;\n          varying vec3 vIndirectFront;\n          #ifdef DOUBLE_SIDED\n              varying vec3 vLightBack;\n              varying vec3 vIndirectBack;\n          #endif\n          #include <common>\n          #include <packing>\n          #include <dithering_pars_fragment>\n          #include <color_pars_fragment>\n          #include <uv_pars_fragment>\n          #include <uv2_pars_fragment>\n          #include <map_pars_fragment>\n          #include <alphamap_pars_fragment>\n          #include <aomap_pars_fragment>\n          #include <lightmap_pars_fragment>\n          #include <emissivemap_pars_fragment>\n          #include <envmap_common_pars_fragment>\n          #include <envmap_pars_fragment>\n          #include <cube_uv_reflection_fragment>\n          #include <bsdfs>\n          #include <lights_pars_begin>\n          #include <fog_pars_fragment>\n          #include <shadowmap_pars_fragment>\n          #include <shadowmask_pars_fragment>\n          #include <specularmap_pars_fragment>\n          #include <logdepthbuf_pars_fragment>\n          #include <clipping_planes_pars_fragment>\n  \n          uniform sampler2D texture1;\n          uniform sampler2D texture2;\n          uniform sampler2D texture3;\n          varying vec3 vUv;\n          varying float texture;\n          \n          void main() {\n              #include <clipping_planes_fragment>\n  \n              vec4 diffuseColor = vec4(0.0,0.0,0.0,0.0);\n\n              if (texture < 0.3) {\n                diffuseColor = texture2D(texture1, 1.6 * vUv.xy + vec2(.51, .51));\n              } else if (texture > 0.7) {\n                diffuseColor = texture2D(texture2, 1.8 * vUv.xy + vec2(.51, .51));\n              } else {\n                diffuseColor = texture2D(texture3, 1.8 * vUv.xy + vec2(.53, .51));\n              }\n  \n              ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n              vec3 totalEmissiveRadiance = emissive;\n              #include <logdepthbuf_fragment>\n              #include <map_fragment>\n              #include <color_fragment>\n              #include <alphamap_fragment>\n              #include <alphatest_fragment>\n              #include <specularmap_fragment>\n              #include <emissivemap_fragment>\n              reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n              #ifdef DOUBLE_SIDED\n                  reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n              #else\n                  reflectedLight.indirectDiffuse += vIndirectFront;\n              #endif\n              #include <lightmap_fragment>\n              reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\n              #ifdef DOUBLE_SIDED\n                  reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n              #else\n                  reflectedLight.directDiffuse = vLightFront;\n              #endif\n              reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\n              #include <aomap_fragment>\n              vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n              #include <envmap_fragment>\n              gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n              #include <tonemapping_fragment>\n              #include <encodings_fragment>\n              #include <fog_fragment>\n              #include <premultiplied_alpha_fragment>\n              #include <dithering_fragment>\n          }\n      ",LandVertexShader:"\n          #define MYLAND\n          varying vec3 vLightFront;\n          varying vec3 vIndirectFront;\n          #ifdef DOUBLE_SIDED\n              varying vec3 vLightBack;\n              varying vec3 vIndirectBack;\n          #endif\n          #include <common>\n          #include <uv_pars_vertex>\n          #include <uv2_pars_vertex>\n          #include <envmap_pars_vertex>\n          #include <bsdfs>\n          #include <lights_pars_begin>\n          #include <color_pars_vertex>\n          #include <fog_pars_vertex>\n          #include <morphtarget_pars_vertex>\n          #include <skinning_pars_vertex>\n          #include <shadowmap_pars_vertex>\n          #include <logdepthbuf_pars_vertex>\n          #include <clipping_planes_pars_vertex>\n          attribute float tex;\n          varying vec3 vUv;\n          varying float texture;\n          void main() {\n              #include <uv_vertex>\n              #include <uv2_vertex>\n              #include <color_vertex>\n              #include <beginnormal_vertex>\n              #include <morphnormal_vertex>\n              #include <skinbase_vertex>\n              #include <skinnormal_vertex>\n              #include <defaultnormal_vertex>\n              #include <begin_vertex>\n              #include <morphtarget_vertex>\n              #include <skinning_vertex>\n              #include <project_vertex>\n              #include <logdepthbuf_vertex>\n              #include <clipping_planes_vertex>\n              #include <worldpos_vertex>\n              #include <envmap_vertex>\n              #include <lights_lambert_vertex>\n              #include <shadowmap_vertex>\n              #include <fog_vertex>\n  \n              vUv = position;\n              texture = tex;\n          }\n      ",LandFragmentShader:"\n          uniform vec3 diffuse;\n          uniform vec3 emissive;\n          uniform float opacity;\n          varying vec3 vLightFront;\n          varying vec3 vIndirectFront;\n          #ifdef DOUBLE_SIDED\n              varying vec3 vLightBack;\n              varying vec3 vIndirectBack;\n          #endif\n          #include <common>\n          #include <packing>\n          #include <dithering_pars_fragment>\n          #include <color_pars_fragment>\n          #include <uv_pars_fragment>\n          #include <uv2_pars_fragment>\n          #include <map_pars_fragment>\n          #include <alphamap_pars_fragment>\n          #include <aomap_pars_fragment>\n          #include <lightmap_pars_fragment>\n          #include <emissivemap_pars_fragment>\n          #include <envmap_common_pars_fragment>\n          #include <envmap_pars_fragment>\n          #include <cube_uv_reflection_fragment>\n          #include <bsdfs>\n          #include <lights_pars_begin>\n          #include <fog_pars_fragment>\n          #include <shadowmap_pars_fragment>\n          #include <shadowmask_pars_fragment>\n          #include <specularmap_pars_fragment>\n          #include <logdepthbuf_pars_fragment>\n          #include <clipping_planes_pars_fragment>\n\n          uniform sampler2D grassTexture;\n          uniform sampler2D sandTexture;\n          uniform sampler2D gravelTexture;\n          uniform sampler2D snowTexture;\n          varying vec3 vUv;\n          varying float texture;\n  \n          void main() {\n              #include <clipping_planes_fragment>\n\n              vec4 color = vec4(0.0,0.0,0.0,0.0);\n\n              if (texture > 0.0 && texture <= 1.0) {\n                color = mix(color, texture2D(sandTexture, vUv.xz), texture);\n              }\n              if (texture > 1.0 && texture <= 2.0) {\n                color = texture2D(sandTexture, vUv.xz);\n                color = mix(color, texture2D(grassTexture, vUv.xz), texture - 1.0);\n              }\n              if (texture > 2.0 && texture <= 3.0) {\n                color = texture2D(grassTexture, vUv.xz);\n                color = mix(color, texture2D(gravelTexture, vUv.xz), texture - 2.0);\n              }\n              if (texture > 3.0 && texture <= 4.0) {\n                color = texture2D(gravelTexture, vUv.xz);\n                color = mix(color, texture2D(snowTexture, vUv.xz), texture - 3.0);\n              }\n  \n              ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n              vec3 totalEmissiveRadiance = emissive;\n              #include <logdepthbuf_fragment>\n              #include <map_fragment>\n              #include <color_fragment>\n              #include <alphamap_fragment>\n              #include <alphatest_fragment>\n              #include <specularmap_fragment>\n              #include <emissivemap_fragment>\n              reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\n              #ifdef DOUBLE_SIDED\n                  reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\n              #else\n                  reflectedLight.indirectDiffuse += vIndirectFront;\n              #endif\n              #include <lightmap_fragment>\n              reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( color.rgb );\n              #ifdef DOUBLE_SIDED\n                  reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\n              #else\n                  reflectedLight.directDiffuse = vLightFront;\n              #endif\n              reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( color.rgb ) * getShadowMask();\n              #include <aomap_fragment>\n              vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n              #include <envmap_fragment>\n              gl_FragColor = vec4( outgoingLight, color.a );\n              #include <tonemapping_fragment>\n              #include <encodings_fragment>\n              #include <fog_fragment>\n              #include <premultiplied_alpha_fragment>\n              #include <dithering_fragment>\n          }\n      ",WaterVertexShader:"\n          #define MYWATER\n          varying vec3 vViewPosition;\n          #ifndef FLAT_SHADED\n              varying vec3 vNormal;\n          #endif\n          #include <common>\n          #include <uv_pars_vertex>\n          #include <uv2_pars_vertex>\n          #include <displacementmap_pars_vertex>\n          #include <envmap_pars_vertex>\n          #include <color_pars_vertex>\n          #include <fog_pars_vertex>\n          #include <morphtarget_pars_vertex>\n          #include <skinning_pars_vertex>\n          #include <shadowmap_pars_vertex>\n          #include <logdepthbuf_pars_vertex>\n          #include <clipping_planes_pars_vertex>\n  \n          varying vec3 vUv;\n          uniform float time;\n          uniform float amp;\n  \n          void main() {\n              vUv = position; \n              #include <uv_vertex>\n              #include <uv2_vertex>\n              #include <color_vertex>\n              #include <beginnormal_vertex>\n              #include <morphnormal_vertex>\n              #include <skinbase_vertex>\n              #include <skinnormal_vertex>\n              #include <defaultnormal_vertex>\n          #ifndef FLAT_SHADED\n              vNormal = normalize( transformedNormal );\n          #endif\n              #include <begin_vertex>\n              #include <morphtarget_vertex>\n              #include <skinning_vertex>\n              #include <displacementmap_vertex>\n              #include <project_vertex>\n              #include <logdepthbuf_vertex>\n              #include <clipping_planes_vertex>\n              vViewPosition = - mvPosition.xyz;\n              #include <worldpos_vertex>\n              #include <envmap_vertex>\n              #include <shadowmap_vertex>\n              #include <fog_vertex>\n  \n            vNormal = normalMatrix * normal;\n            float freq = 0.3;\n            float angle = ((time * 0.2) + (position.x * 8.0))*freq;\n            vUv.z += sin(angle)*amp;\n            vNormal = normalMatrix * normalize(vec3(-amp * freq * cos(angle),0.0,1.0));\n            vec4 modelViewPosition = modelViewMatrix * vec4(vUv, 1.0);\n            gl_Position = projectionMatrix * modelViewPosition;\n          }\n      ",WaterFragmentShader:"\n          #define MYWATER\n          uniform vec3 diffuse;\n          uniform vec3 emissive;\n          uniform vec3 specular;\n          uniform float shininess;\n          uniform float opacity;\n          #include <common>\n          #include <packing>\n          #include <dithering_pars_fragment>\n          #include <color_pars_fragment>\n          #include <uv_pars_fragment>\n          #include <uv2_pars_fragment>\n          #include <map_pars_fragment>\n          #include <alphamap_pars_fragment>\n          #include <aomap_pars_fragment>\n          #include <lightmap_pars_fragment>\n          #include <emissivemap_pars_fragment>\n          #include <envmap_common_pars_fragment>\n          #include <envmap_pars_fragment>\n          #include <cube_uv_reflection_fragment>\n          #include <fog_pars_fragment>\n          #include <bsdfs>\n          #include <lights_pars_begin>\n          #include <lights_phong_pars_fragment>\n          #include <shadowmap_pars_fragment>\n          #include <bumpmap_pars_fragment>\n          #include <normalmap_pars_fragment>\n          #include <specularmap_pars_fragment>\n          #include <logdepthbuf_pars_fragment>\n          #include <clipping_planes_pars_fragment>\n  \n          varying vec3 vPos;\n          uniform float time;\n          uniform sampler2D texture1;\n              varying vec3 vUv;\n          \n          void main() {\n            #include <clipping_planes_fragment>\n  \n            // Compute the ripple effect.\n            float mod1 = 16.0;\n            float mod2 = 0.4;\n              float xoffset = 0.05 * cos(time / 52.0 + mod1 * vUv.y) + 0.09 * cos(time / 65.0 + mod2 * vUv.y);\n                  float yoffset = 0.02 * cos(time / 35.0 + mod1 * vUv.x) + 0.07 * cos(time / 55.0 + mod2 * vUv.x);\n            vec4 diffuseColor = texture2D(texture1, vec2(vUv.x + xoffset, vUv.y + yoffset));\n            // vec4 diffuseColor = texture2D(texture1, vUv.xy);\n            \n            //vec4 diffuseColor = vec4( diffuse, opacity );\n            ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n            vec3 totalEmissiveRadiance = emissive;\n            #include <logdepthbuf_fragment>\n            #include <map_fragment>\n            #include <color_fragment>\n            #include <alphamap_fragment>\n            #include <alphatest_fragment>\n            #include <specularmap_fragment>\n            #include <normal_fragment_begin>\n            #include <normal_fragment_maps>\n            #include <emissivemap_fragment>\n            #include <lights_phong_fragment>\n            #include <lights_fragment_begin>\n            #include <lights_fragment_maps>\n            #include <lights_fragment_end>\n            #include <aomap_fragment>\n            vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n            #include <envmap_fragment>\n            gl_FragColor = vec4( outgoingLight, diffuseColor.a );\n            #include <tonemapping_fragment>\n            #include <encodings_fragment>\n            #include <fog_fragment>\n            #include <premultiplied_alpha_fragment>\n            #include <dithering_fragment>\n            gl_FragColor.a = 0.95;\n          }\n      "}},function(e,n,t){e.exports=function(){return new Worker(t.p+"worker.js")}},function(e,n,t){"use strict";var r=this&&this.__createBinding||(Object.create?function(e,n,t,r){void 0===r&&(r=t),Object.defineProperty(e,r,{enumerable:!0,get:function(){return n[t]}})}:function(e,n,t,r){void 0===r&&(r=t),e[r]=n[t]}),i=this&&this.__setModuleDefault||(Object.create?function(e,n){Object.defineProperty(e,"default",{enumerable:!0,value:n})}:function(e,n){e.default=n}),a=this&&this.__importStar||function(e){if(e&&e.__esModule)return e;var n={};if(null!=e)for(var t in e)"default"!==t&&Object.hasOwnProperty.call(e,t)&&r(n,e,t);return i(n,e),n};Object.defineProperty(n,"__esModule",{value:!0}),n.MyCamera=void 0;const o=a(t(0)),s=t(2);n.MyCamera=class{constructor(e,n,t){this.speed=new o.Vector2,this.acceleration=50,this.drag=-6.5,this.preferredZoom=1.8,this.toggleMap=function(){this.mapMode=!this.mapMode,this.mapMode?(this.preferredZoom=120,this.camera.rotation.y=0,this.ambientLight.visible=!0):(this.preferredZoom=1.8,this.ambientLight.visible=!1)},this.handleCameraMove=function(e){if(this.mapMode){this.camera.rotation.x>=-1.57&&(this.camera.rotation.x-=8*e,this.camera.rotation.x<-1.57&&(this.camera.rotation.x=-1.57));var n=(r=s.getHeight(this.camera.position.x,this.camera.position.z))+this.preferredZoom-this.camera.position.y;return void(this.camera.position.y+=n*e*5)}this.camera.rotation.x<0&&(this.camera.rotation.x+=1.2*e,this.camera.rotation.x>0&&(this.camera.rotation.x=0));var t=new o.Vector2(0,0),r=s.getHeight(this.camera.position.x,this.camera.position.z);this.controls.KeysPressed.w&&(t.y+=1),this.controls.KeysPressed.s&&(t.y-=1),this.controls.KeysPressed.q&&(t.x-=1),this.controls.KeysPressed.e&&(t.x+=1),this.controls.KeysPressed.a&&(this.camera.rotation.y+=2.5*e),this.controls.KeysPressed.d&&(this.camera.rotation.y-=2.5*e),t.rotateAround(new o.Vector2,this.camera.rotation.y);let i=1;if(this.terrain.isWater(r))r=Math.max(r,3.5),i=3;else{let e=s.getHeight(this.camera.position.x+t.x,this.camera.position.z+t.y),n=Math.abs(e-r);i=Math.min(Math.max(1,3*n),3)}if(t.length()>0&&(t.normalize(),t.multiplyScalar(this.acceleration*e)),this.speed.length()>0){let n=new o.Vector2;n.set(this.speed.x,this.speed.y),n.multiplyScalar(this.drag*e*i),t.add(n)}this.speed.add(t),this.camera.position.x+=this.speed.x*e,this.camera.position.z-=this.speed.y*e;n=r+this.preferredZoom-this.camera.position.y;this.camera.position.y+=n*e*5},this.camera=new o.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.1,2e3),this.camera.position.x=96,this.camera.position.z=33,this.controls=n,this.terrain=t,e.add(this.camera),this.ambientLight=new o.AmbientLight(6316128,.5),this.ambientLight.visible=!1,this.camera.add(this.ambientLight)}}},function(e,n,t){"use strict";Object.defineProperty(n,"__esModule",{value:!0}),n.Controls=void 0;n.Controls=class{constructor(){this.KeysPressed={w:!1,a:!1,s:!1,d:!1,q:!1,e:!1,f:!1,m:!1};let e=this.KeysPressed,n=this;window.onblur=function(){e.w=e.a=e.s=e.d=!1},window.onkeydown=function(t){switch(t.keyCode){case 87:case 38:e.w=!0;break;case 65:case 37:e.a=!0;break;case 83:case 40:e.s=!0;break;case 68:case 39:e.d=!0;break;case 81:e.q=!0;break;case 69:e.e=!0;break;case 70:e.f=!0,n.flashLight=!n.flashLight;break;case 77:e.m=!0,n.camera&&n.camera.toggleMap();break;default:return!0}return!1},window.onkeyup=function(n){switch(n.keyCode){case 87:case 38:e.w=!1;break;case 65:case 37:e.a=!1;break;case 83:case 40:e.s=!1;break;case 68:case 39:e.d=!1;break;case 81:e.q=!1;break;case 69:e.e=!1;break;case 70:e.f=!1;break;case 77:e.m=!0;break;default:return!0}return!1},window.onwheel=function(e){n.camera&&-1.57==n.camera.camera.rotation.x&&(n.camera.preferredZoom-=.01*e.deltaY,n.camera.preferredZoom<1&&(n.camera.preferredZoom=1),n.camera.preferredZoom>1800&&(n.camera.preferredZoom=1800))}}}}]);
//# sourceMappingURL=bundle.js.map