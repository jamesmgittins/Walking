{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/ts/game/gamemodel.ts","webpack:///./src/ts/terrain/constants.ts","webpack:///external \"THREE\"","webpack:///./src/ts/terrain/terrain.ts","webpack:///./src/ts/terrain/utils.ts","webpack:///./src/angular.ts","webpack:///./src/index.ts","webpack:///./src/style.css?7163","webpack:///./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js","webpack:///./src/style.css","webpack:///./node_modules/css-loader/dist/runtime/api.js","webpack:///./src/ts/shaders.ts","webpack:///./src/ts/terrain/terrain.worker.ts","webpack:///./src/ts/game/camera.ts","webpack:///./src/ts/game/controls.ts","webpack:///./src/ts/game/vehicles.ts"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","model","money","settings","terrainSettings","settingsChanged","chunkSize","Constants","x","chunkRange","detailSettings","treeNumber","maximumTrees","grassNumber","maximumGrass","grassDensity","rendererSettings","antialias","resolution","seedSettings","seed","noiseSeed","options","terrainOptions","chunkSizeOptions","chunkRangeOptions","detailOptions","treeNumOptions","grassNumOptions","grassDensityOptions","rendererOptions","antialiasOptions","resolutionOptions","this","heights","water","sand","plainsMin","plainsMax","mountainFactor","mountainMod","y","THREE","gameModel","getGameModel","noise","grassTexture","TextureLoader","load","grassBladeTexture","grassBladeTexture2","grassBladeTexture3","gravelTexture","sandTexture","waterTexture","snowTexture","wrapS","MirroredRepeatWrapping","wrapT","RepeatWrapping","magFilter","NearestFilter","uniforms","UniformsUtils","merge","ShaderLib","phong","texture1","type","time","amp","waterMaterial","ShaderMaterial","vertexShader","MyShaders","WaterVertexShader","fragmentShader","WaterFragmentShader","lights","transparent","alphaTest","landUniforms","standard","grassUniforms","lambert","texture2","texture3","maxDistance","treeUniforms","getGrassMesh","geo","PlaneBufferGeometry","setAttribute","BufferAttribute","Float32Array","InstancedMesh","side","DoubleSide","GrassVertexShader","GrassFragmentShader","getTreeMesh","getTreeGeometery","vertexColors","TreeVertexShader","TreeFragmentShader","landMaterial","LandVertexShader","LandFragmentShader","BackSide","waterGeometry","waterPlane","Mesh","position","rotation","Math","PI","staticWaterGeo","staticWater","MeshPhongMaterial","map","height","WorkerPool","maxWorkers","onMessage","workers","counter","length","worker","onmessage","push","Chunk","size","planeMesh","discarded","scene","chunks","chunkMap","discardedChunks","maxTreeDistance","maxGrassDistance","lastCubeCenter","lastGrassCenter","group","Group","add","waterGroup","terrainGroup","grassMesh","treeMesh","that","workerPool","event","data","processGrass","grassMatrices","grassTextures","processTrees","treeMatrices","processChunk","pa","landTextures","chunk","pop","processed","computeBoundingSphere","computeVertexNormals","foreignChunk","foreignNormals","foreignIndex","hVerts","wVerts","normals","getAttribute","setXYZ","getX","getY","getZ","needsUpdate","grassTextureArray","count","instanceMatrix","copyArray","geometry","InstancedBufferAttribute","treeMatrixArray","paData","visible","fixChunkNormals","createChunkObject","getWorker","postMessage","keys","dispose","remove","destroyAllChunks","timeDiff","sunPos","camera","isNaN","z","updateSettings","updateDetailSettings","updateUniforms","offsetX","round","offsetY","abs","centerChunk","minX","maxX","minY","maxY","destroyChunk","splice","j","createChunk2","heightAdjustment","simplex2","plainsHeight","pow","max","snowMod","gravelMod","greenColor","Color","brownColor","Geometry","level1","ConeGeometry","faces","forEach","f","color","set","translate","level2","level3","trunk","CylinderGeometry","bufferGeo","BufferGeometry","fromGeometry","angular","controller","$interval","sd","stats","update","floor","menus","hideMenus","showMenu","startApplication","Scene","terrain","Terrain","Camera","MyCamera","controls","Controls","renderer","WebGLRenderer","setSize","window","innerWidth","innerHeight","dayColor","nightColor","background","document","body","appendChild","domElement","light","SpotLight","target","sunGroup","sunLightColor","moonLightColor","dirLight","DirectionalLight","spriteMap","spriteMaterial","SpriteMaterial","sunSprite","Sprite","scale","multiplyScalar","copy","moonMap","moonMaterial","moonSprite","timeFactor","frames","lastUpdate","currTime","lastTime","animate","requestAnimationFrame","console","log","setPixelRatio","Date","now","min","sinResult","flashLight","intensity","sunPosition","Vector3","getWorldPosition","sunlightRatio","updateTides","setRGB","g","b","updateSun","element","getElementById","posX","posY","calls","speed","fps","innerText","toString","toFixed","info","render","currentVehicle","updateFps","updateChunks","handleMovement","onresize","aspect","updateProjectionMatrix","api","content","default","locals","memo","isOldIE","Boolean","all","atob","getTarget","styleTarget","querySelector","HTMLIFrameElement","contentDocument","head","e","stylesInDom","getIndexByIdentifier","identifier","result","modulesToDom","list","idCountMap","identifiers","item","id","base","concat","index","obj","css","media","sourceMap","references","updater","addStyle","insertStyleElement","style","createElement","attributes","nonce","insert","Error","textStore","replaceText","replacement","filter","join","applyToSingletonTag","styleSheet","cssText","cssNode","createTextNode","childNodes","removeChild","insertBefore","applyToTag","removeAttribute","btoa","unescape","encodeURIComponent","JSON","stringify","firstChild","singleton","singletonCounter","styleIndex","parentNode","removeStyleElement","newObj","lastIdentifiers","newList","newLastIdentifiers","_i","_index","___CSS_LOADER_API_IMPORT___","useSourceMap","cssMapping","sourceMapping","base64","sourceURLs","sources","source","sourceRoot","cssWithMappingToString","mediaQuery","dedupe","alreadyImportedModules","Worker","PerspectiveCamera","myCamera","KeysPressed","w","a","q","vehicleWalking","Walking","vehicleMap","MapMode","vehicleBoat","Boat","onblur","onkeydown","keyCode","toggleMap","onkeyup","onwheel","preferredZoom","deltaY","onDestroy","lastVehicle","onInit","Vehicle","super","Vector2","acceleration","drag","turnSpeed","moveVec","getHeight","rotateAround","dragModifier","isWater","normalize","diff","ambientLight","AmbientLight"],"mappings":"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","file":"bundle.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 5);\n","import * as Constants from '../terrain/constants';\r\n\r\nclass GameModel {\r\n    public money : number = 0;\r\n    public time : number;\r\n\r\n    public addMoney(value : number) {\r\n        this.money += value;\r\n    }\r\n\r\n    public settings = {\r\n        terrainSettings : {\r\n            settingsChanged : false,\r\n            chunkSize : Constants.chunkSize.x,\r\n            chunkRange : Constants.chunkRange\r\n        },\r\n        detailSettings : {\r\n            settingsChanged : false,\r\n            treeNumber : Constants.maximumTrees,\r\n            grassNumber : Constants.maximumGrass,\r\n            grassDensity : 1\r\n        },\r\n        rendererSettings : {\r\n            settingsChanged : false,\r\n            antialias : false,\r\n            resolution : 1.0\r\n        },\r\n        seedSettings : {\r\n            seed : Constants.noiseSeed,\r\n            settingsChanged : false\r\n        }\r\n    }\r\n\r\n    public options = {\r\n        terrainOptions : {\r\n            chunkSizeOptions : [32,64,128,192,256],\r\n            chunkRangeOptions : [1,2,3,4,5,6,7]\r\n        },\r\n        detailOptions : {\r\n            treeNumOptions : [50, 100, 200, 500, 1000, 2000],\r\n            grassNumOptions : [500, 1000, 2000, 5000, 10000, 20000, 30000, 50000, 100000],\r\n            grassDensityOptions : [{name:\"low\", value:1},{name:\"medium\", value: 0.5}, {name:\"high\", value:0.25}, {name: \"very high\", value : 0.2}]\r\n        },\r\n        rendererOptions : {\r\n            antialiasOptions : [{name:\"On\",value:true} , {name:\"Off\", value:false}],\r\n            resolutionOptions : [{name:\"200%\",value:2.0},{name:\"150%\",value:1.5},{name:\"100%\",value:1.0} , {name:\"75%\", value:0.75}, {name:\"50%\", value:0.5}],\r\n        }\r\n    }\r\n}\r\n\r\nconst model = new GameModel();\r\n\r\nexport function getGameModel() : GameModel {\r\n    return model;\r\n}","export const heights = {\r\n    water: 4.3,\r\n    sand: 5.0,\r\n    plainsMin: 4,\r\n    plainsMax: 35,\r\n    mountainFactor : 1.6\r\n}\r\nexport const mountainMod = heights.plainsMax - (heights.plainsMin + ((heights.plainsMax - heights.plainsMin) / 4));\r\nexport const chunkSize = { x: 128, y: 128 };\r\nexport const chunkRange = 3;\r\nexport const noiseSeed = 1024;\r\nexport const maximumTrees = 500;\r\nexport const maximumGrass = 2000;","module.exports = THREE;","// three.js\r\nimport * as THREE from 'three';\r\nimport {MyShaders} from \"../shaders\";\r\nimport MyWorker from './terrain.worker';\r\nimport {heights, noiseSeed, maximumGrass, maximumTrees} from './constants';\r\nimport {getTreeGeometery} from './utils';\r\nimport { getGameModel } from '../game/gamemodel';\r\n\r\nconst gameModel = getGameModel();\r\nnoise.seed(gameModel.settings.seedSettings.seed);\r\nconst grassTexture = new THREE.TextureLoader().load('img/grass.png');\r\nconst grassBladeTexture = new THREE.TextureLoader().load('img/grassblade.png');\r\nconst grassBladeTexture2 = new THREE.TextureLoader().load('img/grassblade2.png');\r\nconst grassBladeTexture3 = new THREE.TextureLoader().load('img/grassblade3.png');\r\nconst gravelTexture = new THREE.TextureLoader().load('img/gravel.png');\r\nconst sandTexture = new THREE.TextureLoader().load('img/sand.png');\r\nconst waterTexture = new THREE.TextureLoader().load('img/water.jpg');\r\nconst snowTexture = new THREE.TextureLoader().load('img/snow.png');\r\nwaterTexture.wrapS = THREE.MirroredRepeatWrapping;\r\nwaterTexture.wrapT = THREE.MirroredRepeatWrapping;\r\nwaterTexture.wrapT = THREE.RepeatWrapping;\r\ngravelTexture.wrapS = snowTexture.wrapS = sandTexture.wrapS = grassTexture.wrapS = THREE.RepeatWrapping;\r\ngravelTexture.wrapT = snowTexture.wrapT = sandTexture.wrapT = grassTexture.wrapT = THREE.RepeatWrapping;\r\ngravelTexture.magFilter = snowTexture.magFilter = sandTexture.magFilter = grassTexture.magFilter = THREE.NearestFilter;\r\n\r\nconst uniforms = THREE.UniformsUtils.merge([THREE.ShaderLib.phong.uniforms]);\r\nuniforms.texture1 = { type: \"t\", value: waterTexture };\r\nuniforms.time = { type: \"f\", value: 1.0 };\r\nuniforms.amp = { type: \"f\", value: 0.004 };\r\n\r\nconst waterMaterial = new THREE.ShaderMaterial({\r\n    uniforms: uniforms,\r\n    vertexShader: MyShaders.WaterVertexShader,\r\n    fragmentShader: MyShaders.WaterFragmentShader,\r\n    lights: true, transparent : true, alphaTest : 0.5,\r\n});\r\n\r\n// const waterMaterial = new THREE.MeshPhongMaterial({map:waterTexture, bumpMap:waterTexture, bumpScale:0.1, transparent:true, alphaTest:0.5});\r\n\r\nconst landUniforms = THREE.UniformsUtils.merge([THREE.ShaderLib.standard.uniforms]);\r\nlandUniforms.grassTexture = { type: \"t\", value: grassTexture };\r\nlandUniforms.sandTexture = { type: \"t\", value: sandTexture };\r\nlandUniforms.snowTexture = { type: \"t\", value: snowTexture };\r\nlandUniforms.gravelTexture = { type: \"t\", value: gravelTexture };\r\n\r\nconst grassUniforms = THREE.UniformsUtils.merge([THREE.ShaderLib.lambert.uniforms]);\r\ngrassUniforms.texture1 = { type: \"t\", value: grassBladeTexture };\r\ngrassUniforms.texture2 = { type: \"t\", value: grassBladeTexture2 };\r\ngrassUniforms.texture3 = { type: \"t\", value: grassBladeTexture3 };\r\ngrassUniforms.time = { type: \"f\", value: 0 };\r\ngrassUniforms.amp = { type: \"f\", value: 0.5 };\r\ngrassUniforms.maxDistance = { type : \"f\", value : 30};\r\n\r\nconst treeUniforms = THREE.UniformsUtils.merge([THREE.ShaderLib.lambert.uniforms]);\r\ntreeUniforms.time = { type: \"f\", value: 0 };\r\ntreeUniforms.amp = { type: \"f\", value: 0.05 };\r\ntreeUniforms.maxDistance = { type : \"f\", value : 30};\r\n\r\nfunction getGrassMesh() : THREE.InstancedMesh {\r\n    let geo = new THREE.PlaneBufferGeometry(0.5, 0.5);\r\n    geo.setAttribute(\"normal\", new THREE.BufferAttribute(new Float32Array([0,1,0.7,0,1,0.7, // top\r\n                                                                            0,0.7,1,0,0.7,1]), // bottom\r\n                                                                            3, false));\r\n    \r\n    return new THREE.InstancedMesh( geo, \r\n        new THREE.ShaderMaterial({ \r\n            uniforms : grassUniforms, \r\n            side : THREE.DoubleSide, \r\n            vertexShader : MyShaders.GrassVertexShader,\r\n            fragmentShader : MyShaders.GrassFragmentShader,\r\n            transparent : true, alphaTest : 0.5, \r\n            lights : true\r\n        }), \r\n        // new THREE.MeshBasicMaterial(),\r\n        gameModel.settings.detailSettings.grassNumber);\r\n}\r\n\r\nfunction getTreeMesh() : THREE.InstancedMesh {\r\n    return new THREE.InstancedMesh( getTreeGeometery(), \r\n        new THREE.ShaderMaterial({\r\n            uniforms : treeUniforms,\r\n            vertexColors: true, \r\n            vertexShader : MyShaders.TreeVertexShader,\r\n            fragmentShader : MyShaders.TreeFragmentShader,\r\n            lights : true, transparent : true, alphaTest : 0.5,\r\n        }),\r\n        gameModel.settings.detailSettings.treeNumber);\r\n}\r\n\r\nlet landMaterial = new THREE.ShaderMaterial({\r\n    uniforms: landUniforms,\r\n    vertexShader: MyShaders.LandVertexShader,\r\n    // vertexShader : THREE.ShaderLib.lambert.vertexShader,\r\n    fragmentShader: MyShaders.LandFragmentShader,\r\n    // fragmentShader : THREE.ShaderLib.lambert.fragmentShader,\r\n    lights: true, side : THREE.BackSide\r\n    // fog: true\r\n});\r\n\r\n// new THREE.MeshLambertMaterial({side : THREE.BackSide});\r\n\r\n// var waterGeometry = new THREE.PlaneBufferGeometry(320, 320, 480, 1);\r\nvar waterGeometry = new THREE.PlaneBufferGeometry(4000, 4000, 1, 1);\r\nvar waterPlane = new THREE.Mesh(waterGeometry, waterMaterial);\r\nwaterPlane.position.y = heights.water + 0.55;\r\nwaterPlane.rotation.x = -0.5 * Math.PI;\r\nvar staticWaterGeo = new THREE.PlaneBufferGeometry(6400, 6400, 1, 1);\r\nvar staticWater = new THREE.Mesh(staticWaterGeo, new THREE.MeshPhongMaterial({ map: waterTexture }));\r\nstaticWater.position.y = heights.water + 0.5;\r\nstaticWater.rotation.x = -0.5 * Math.PI;\r\n\r\nexport function isWater(height : number) : boolean {\r\n    return height < waterPlane.position.y;\r\n}\r\n\r\nclass WorkerPool {\r\n    private workers : Worker[] = [];\r\n    private counter : number = 0;\r\n    private maxWorkers : number = 1;\r\n    private onMessage : (event : MessageEvent) => void;\r\n    constructor(maxWorkers : number, onMessage :  (event : MessageEvent) => void) {\r\n        this.maxWorkers = maxWorkers;\r\n        this.onMessage = onMessage;\r\n    }\r\n    public getWorker() : Worker {\r\n        if (this.workers.length < this.maxWorkers) {\r\n            let worker = new MyWorker();\r\n            worker.onmessage = this.onMessage;\r\n            this.workers.push(worker);\r\n        }\r\n        this.counter++;\r\n        if (this.counter > this.workers.length - 1) {\r\n            this.counter = 0;\r\n        }\r\n        return this.workers[this.counter];        \r\n    }\r\n}\r\n\r\nclass Chunk {\r\n    public x : number;\r\n    public y : number;\r\n    public geo: THREE.PlaneBufferGeometry;\r\n    public planeMesh : THREE.Mesh;\r\n    public discarded : boolean;\r\n    public processed : boolean;\r\n    constructor(x : number, y : number, size : number) {\r\n        this.x = x;\r\n        this.y = y;\r\n        this.geo = new THREE.PlaneBufferGeometry(size, size, size, size);\r\n        this.planeMesh = new THREE.Mesh(this.geo, landMaterial);\r\n        this.discarded = false;\r\n    }\r\n}\r\n\r\nexport class Terrain {\r\n\r\n    public chunkRange : number = 1;\r\n    public chunkSize : number = 32;\r\n    private chunks : Chunk[] = [];\r\n    private chunkMap : Chunk[][] = [];\r\n    private discardedChunks : Chunk[] = [];\r\n    private group : THREE.Group;\r\n    private waterGroup : THREE.Group;\r\n    private terrainGroup : THREE.Group;\r\n    private workerPool : WorkerPool;\r\n    private grassMesh : THREE.InstancedMesh;\r\n    private treeMesh : THREE.InstancedMesh;\r\n    private maxTreeDistance : number = 0;\r\n    private maxGrassDistance : number = 0;\r\n    private maxWorkers = 3;\r\n\r\n    constructor(scene : THREE.Scene) {\r\n        this.chunkRange = gameModel.settings.terrainSettings.chunkRange;\r\n        this.chunkSize = gameModel.settings.terrainSettings.chunkSize;\r\n        this.group = new THREE.Group();\r\n        scene.add(this.group);\r\n        this.waterGroup = new THREE.Group();\r\n        // this.waterGroup.add(staticWater);\r\n        this.waterGroup.add(waterPlane);\r\n        this.group.add(this.waterGroup);\r\n        this.terrainGroup = new THREE.Group();\r\n        this.group.add(this.terrainGroup);\r\n        this.grassMesh = getGrassMesh();\r\n        this.terrainGroup.add(this.grassMesh);\r\n        this.treeMesh = getTreeMesh();\r\n        this.terrainGroup.add(this.treeMesh);\r\n        let that = this;\r\n        this.workerPool = new WorkerPool(this.maxWorkers, function(event : MessageEvent) {\r\n            switch(event.data.type) {\r\n                case \"grass\":\r\n                    that.maxGrassDistance = event.data.maxDistance;\r\n                    that.processGrass(event.data.grassMatrices, event.data.grassTextures);\r\n                    break;\r\n                case \"tree\":\r\n                    that.maxTreeDistance = event.data.maxDistance;\r\n                    that.processTrees(event.data.treeMatrices);\r\n                    break;\r\n                case \"land\":\r\n                    // that.processChunk(event.data.x, event.data.y, event.data.pa, event.data.landTextures, event.data.normals, event.data.size);\r\n                    that.processChunk(event.data.x, event.data.y, event.data.pa, event.data.landTextures, event.data.size);\r\n                    break;\r\n            }\r\n        });\r\n    }\r\n\r\n    private createChunkObject (x : number, y : number) {\r\n        if (this.discardedChunks.length > 0) {\r\n            let chunk = this.discardedChunks.pop();\r\n            chunk.x = x;\r\n            chunk.y = y;\r\n            chunk.discarded = false;\r\n            chunk.processed = false;\r\n            return chunk;\r\n        }\r\n        let chunk = new Chunk(x , y, this.chunkSize);\r\n        this.terrainGroup.add(chunk.planeMesh);\r\n        chunk.processed = false;\r\n        return chunk;\r\n    }\r\n\r\n    private fixChunkNormals (chunk : Chunk) {\r\n        chunk.geo.computeBoundingSphere();\r\n        chunk.geo.computeVertexNormals();\r\n\r\n        let hVerts = this.chunkSize + 1;\r\n        let wVerts = this.chunkSize + 1;\r\n        let normals = chunk.geo.getAttribute(\"normal\");\r\n\r\n        let foreignChunk : Chunk\r\n        let foreignNormals : THREE.BufferAttribute | THREE.InterleavedBufferAttribute;\r\n        let foreignIndex : number;\r\n        if (this.chunkMap[chunk.x - this.chunkSize] && this.chunkMap[chunk.x - this.chunkSize][chunk.y]) {  // left side exists j = 0, i changes\r\n            foreignChunk = this.chunkMap[chunk.x - this.chunkSize][chunk.y];\r\n            if (foreignChunk.processed) {\r\n                foreignNormals = foreignChunk.geo.getAttribute(\"normal\");\r\n                for (let i = 0; i < wVerts; i++) {\r\n                    foreignIndex = (hVerts - 1) * wVerts + i;\r\n                    normals.setXYZ(i, foreignNormals.getX(foreignIndex), foreignNormals.getY(foreignIndex), foreignNormals.getZ(foreignIndex));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.chunkMap[chunk.x + this.chunkSize] && this.chunkMap[chunk.x + this.chunkSize][chunk.y]) {  // right side exists j = wVerts - 1, i changes\r\n            foreignChunk = this.chunkMap[chunk.x + this.chunkSize][chunk.y];\r\n            if (foreignChunk.processed) {\r\n                foreignNormals = foreignChunk.geo.getAttribute(\"normal\");\r\n                for (let i = 0; i < wVerts; i++) {\r\n                    foreignIndex = i;\r\n                    normals.setXYZ((hVerts - 1) * wVerts + i, foreignNormals.getX(foreignIndex), foreignNormals.getY(foreignIndex), foreignNormals.getZ(foreignIndex));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.chunkMap[chunk.x] && this.chunkMap[chunk.x][chunk.y + this.chunkSize]) {  // top side exists i = 0, j changes\r\n            foreignChunk = this.chunkMap[chunk.x][chunk.y + this.chunkSize];\r\n            if (foreignChunk.processed) {\r\n                foreignNormals = foreignChunk.geo.getAttribute(\"normal\");\r\n                for (let i = 0; i < hVerts; i++) {\r\n                    foreignIndex = i * wVerts;\r\n                    normals.setXYZ(i * wVerts + (hVerts - 1), foreignNormals.getX(foreignIndex), foreignNormals.getY(foreignIndex), foreignNormals.getZ(foreignIndex));\r\n                }\r\n            }\r\n        }\r\n\r\n        if (this.chunkMap[chunk.x] && this.chunkMap[chunk.x][chunk.y - this.chunkSize]) {  // bottom side exists i = hVerts - 1, j changes\r\n            foreignChunk = this.chunkMap[chunk.x][chunk.y - this.chunkSize];\r\n            if (foreignChunk.processed) {\r\n                foreignNormals = foreignChunk.geo.getAttribute(\"normal\");\r\n                for (let i = 0; i < hVerts; i++) {\r\n                    foreignIndex = i * wVerts + (hVerts - 1);\r\n                    normals.setXYZ(i * wVerts, foreignNormals.getX(foreignIndex), foreignNormals.getY(foreignIndex), foreignNormals.getZ(foreignIndex));\r\n                }\r\n            }\r\n        }\r\n        let pos = chunk.geo.getAttribute(\"position\") as THREE.BufferAttribute;\r\n        pos.needsUpdate = true;\r\n    }\r\n\r\n    private processGrass(grassMatrices : [], grassTextures : []) {\r\n        let grassTextureArray = new Float32Array(grassTextures);\r\n        if (this.grassMesh.count < grassTextureArray.length)\r\n            return;\r\n        this.grassMesh.instanceMatrix.copyArray(new Float32Array(grassMatrices));\r\n        (this.grassMesh.geometry as THREE.PlaneBufferGeometry).setAttribute( 'tex', new THREE.InstancedBufferAttribute(grassTextureArray, 1, false, 1) );\r\n        this.grassMesh.instanceMatrix.needsUpdate = true;\r\n        this.treeMesh.instanceMatrix.needsUpdate = true;\r\n    }\r\n\r\n    private processTrees(treeMatrices : []) {\r\n        let treeMatrixArray = new Float32Array(treeMatrices);\r\n        if (this.treeMesh.count < treeMatrixArray.length / 16)\r\n            return;\r\n        this.treeMesh.instanceMatrix.copyArray(treeMatrixArray);\r\n        this.treeMesh.instanceMatrix.needsUpdate = true;\r\n    }\r\n\r\n    private processChunk(x : number, y : number, paData : [], landTextures : [],  size : number) {\r\n        if (size != this.chunkSize || !this.chunkMap[x] || !this.chunkMap[x][y])\r\n            return;\r\n\r\n        let chunk = this.chunkMap[x][y];\r\n        chunk.planeMesh.visible = false;\r\n        chunk.geo.setAttribute(\"position\", new THREE.BufferAttribute(new Float32Array(paData), 3, false));\r\n        // chunk.geo.setAttribute(\"normal\", new THREE.BufferAttribute(new Float32Array(normals), 3, false));\r\n        chunk.geo.setAttribute(\"tex\", new THREE.BufferAttribute(new Float32Array(landTextures), 1, false));\r\n        this.fixChunkNormals(chunk);\r\n        chunk.processed = true;\r\n        chunk.planeMesh.visible = true;\r\n    }\r\n\r\n    private createChunk2 (x : number, y : number) {\r\n        let chunk = this.createChunkObject(x, y);\r\n        this.workerPool.getWorker().postMessage([\"land\", x, y, this.chunkSize]);\r\n        \r\n        this.chunks.push(chunk);\r\n        if (!this.chunkMap[x])\r\n            this.chunkMap[x] = [];\r\n\r\n        this.chunkMap[x][y] = chunk;\r\n    }\r\n\r\n    private destroyChunk(chunk : Chunk) {\r\n        chunk.discarded = true;\r\n        this.discardedChunks.push(chunk);\r\n        delete this.chunkMap[chunk.x][chunk.y];\r\n        if (Object.keys(this.chunkMap[chunk.x]).length == 0)\r\n            delete this.chunkMap[chunk.x];\r\n    }\r\n\r\n    private destroyAllChunks() {\r\n        for (var i = 0; i < this.chunks.length; i++) {\r\n            let chunk = this.chunks[i];\r\n            chunk.planeMesh.geometry.dispose();\r\n            this.terrainGroup.remove( chunk.planeMesh );\r\n        }\r\n        this.chunks = [];\r\n        this.discardedChunks = [];\r\n        this.chunkMap = [];\r\n    }\r\n\r\n    private updateSettings() {\r\n        this.chunkRange = gameModel.settings.terrainSettings.chunkRange;\r\n        this.chunkSize = gameModel.settings.terrainSettings.chunkSize;\r\n        gameModel.settings.terrainSettings.settingsChanged = false;\r\n        this.lastCubeCenter = { x: 1, y: 1 };\r\n        this.destroyAllChunks();\r\n    }\r\n\r\n    private updateDetailSettings() {\r\n        this.grassMesh.geometry.dispose();\r\n        this.terrainGroup.remove(this.grassMesh);\r\n        this.treeMesh.geometry.dispose();\r\n        this.terrainGroup.remove(this.treeMesh);\r\n        this.grassMesh = getGrassMesh();\r\n        this.terrainGroup.add(this.grassMesh);\r\n        this.treeMesh = getTreeMesh();\r\n        this.terrainGroup.add(this.treeMesh);\r\n        this.lastGrassCenter.x -= 50;\r\n        this.lastCubeCenter.x -= 2;\r\n        gameModel.settings.detailSettings.settingsChanged = false;\r\n    }\r\n\r\n    private lastCubeCenter = { x: 1, y: 1 };\r\n    private lastGrassCenter = {x : 0, y: 0};\r\n\r\n    private updateUniforms(timeDiff : number) {\r\n        uniforms.time.value += timeDiff * 60;\r\n        grassUniforms.time.value += timeDiff * 60;\r\n        if (grassUniforms.maxDistance.value > this.maxGrassDistance) {\r\n            grassUniforms.maxDistance.value -= 10 * timeDiff;\r\n        }\r\n        if (grassUniforms.maxDistance.value < this.maxGrassDistance) {\r\n            grassUniforms.maxDistance.value += 10 * timeDiff;\r\n        }\r\n        // console.log(this.maxGrassDistance);\r\n        // console.log(grassUniforms.maxDistance.value);\r\n        treeUniforms.time.value += timeDiff * 60;\r\n        if (treeUniforms.maxDistance.value > this.maxTreeDistance) {\r\n            treeUniforms.maxDistance.value -= 10 * timeDiff;\r\n        }\r\n        if (treeUniforms.maxDistance.value < this.maxTreeDistance) {\r\n            treeUniforms.maxDistance.value += 10 * timeDiff;\r\n        }\r\n    }\r\n\r\n    public updateTides(sunPos : number) {\r\n        waterPlane.position.y = heights.water + 0.55 + (sunPos / -3000);\r\n    }\r\n\r\n    public updateChunks(timeDiff : number, camera : THREE.Camera) {\r\n\r\n        if (gameModel.settings.seedSettings.settingsChanged) {\r\n            gameModel.settings.seedSettings.settingsChanged = false;\r\n            if (!isNaN(gameModel.settings.seedSettings.seed)) {\r\n                for (let i = 0; i < this.maxWorkers; i++)\r\n                    this.workerPool.getWorker().postMessage([\"seed\", gameModel.settings.seedSettings.seed]);\r\n                noise.seed(gameModel.settings.seedSettings.seed);\r\n                this.lastGrassCenter.x -= 50;\r\n                this.lastCubeCenter.x -= 2;\r\n                camera.position.x = 0;\r\n                camera.position.z = 0;\r\n                this.destroyAllChunks();\r\n            }\r\n        }\r\n\r\n        if (gameModel.settings.terrainSettings.settingsChanged) {\r\n            this.updateSettings();\r\n        }\r\n        if (gameModel.settings.detailSettings.settingsChanged) {\r\n            this.updateDetailSettings();\r\n        }\r\n        this.updateUniforms(timeDiff);\r\n        let offsetX = Math.round(camera.position.x);\r\n        let offsetY = Math.round(camera.position.z);\r\n        if (Math.abs(offsetX - this.waterGroup.position.x) > 64 || Math.abs(offsetY - this.waterGroup.position.z) > 64) {\r\n            this.waterGroup.position.x = offsetX;\r\n            this.waterGroup.position.z = offsetY;\r\n        }\r\n\r\n        if (this.lastCubeCenter.x == offsetX && this.lastCubeCenter.y == offsetY)\r\n            return;\r\n\r\n        if (Math.abs(offsetX - this.lastGrassCenter.x) > 3 || Math.abs(offsetY - this.lastGrassCenter.y) > 3) {\r\n            this.workerPool.getWorker().postMessage([\"grass\", offsetX, offsetY, gameModel.settings.detailSettings.grassDensity,\r\n                gameModel.settings.detailSettings.grassNumber]);\r\n            this.workerPool.getWorker().postMessage([\"tree\", offsetX, offsetY, gameModel.settings.detailSettings.treeNumber]);\r\n            this.lastGrassCenter.x = offsetX;\r\n            this.lastGrassCenter.y = offsetY;\r\n        }\r\n\r\n        let centerChunk = {\r\n            x: Math.round(offsetX / this.chunkSize) * this.chunkSize,\r\n            y: Math.round(offsetY / this.chunkSize) * this.chunkSize,\r\n        }\r\n        var minX = centerChunk.x - (this.chunkRange * this.chunkSize);\r\n        var maxX = centerChunk.x + (this.chunkRange * this.chunkSize);\r\n        var minY = centerChunk.y - (this.chunkRange * this.chunkSize);\r\n        let maxY = centerChunk.y + (this.chunkRange * this.chunkSize);\r\n        for (var i = 0; i < this.chunks.length; i++) {\r\n            if (this.chunks[i].x < minX || this.chunks[i].x > maxX || this.chunks[i].y < minY || this.chunks[i].y > maxY) {\r\n                this.destroyChunk(this.chunks[i]);\r\n                this.chunks.splice(i, 1);\r\n                return;\r\n            }\r\n        }\r\n        for (var i = -this.chunkRange; i <= this.chunkRange; i++) {\r\n            var x = centerChunk.x + (i * this.chunkSize);\r\n            for (var j = -this.chunkRange; j <= this.chunkRange; j++) {\r\n                var y = centerChunk.y + (j * this.chunkSize);\r\n                if (!this.chunkMap[x] || !this.chunkMap[x][y]) {\r\n                    this.createChunk2(x, y);\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        this.lastCubeCenter.x = offsetX;\r\n        this.lastCubeCenter.y = offsetY;\r\n    }\r\n}","import {heights, mountainMod} from './constants';\r\n\r\nconst heightAdjustment = heights.plainsMin + ((heights.plainsMax - heights.plainsMin) / 4);\r\n\r\nexport function getHeight(x : number, y : number) {\r\n    let height =\r\n        0.5 * noise.simplex2(x / 8,   y / 8) +\r\n        2   * noise.simplex2(x / 32,  y / 32) +\r\n        10  * noise.simplex2(x / 100, y / 100) +\r\n        32  * noise.simplex2(x / 200, y / 200) +\r\n        32  * noise.simplex2(x / 500, y / 500) +\r\n        24  * noise.simplex2(x / 900, y / 900);\r\n\r\n    height += 30;\r\n        \r\n    let plainsHeight = heights.plainsMin + ((height - heights.plainsMin) / 4);\r\n\r\n    if (height > heights.plainsMax) {\r\n        return Math.pow(plainsHeight - heightAdjustment, heights.mountainFactor) + heightAdjustment;\r\n    }\r\n    return plainsHeight;\r\n}\r\n\r\nexport function getLandTexture(x : number, y : number, height : number) {\r\n\r\n    if (height < heights.water - 1) {\r\n        return 0 + Math.max(height - (heights.water - 2), 0);\r\n        // return 0;\r\n    }\r\n    if (height < heights.sand + 0.5){\r\n        return 1;\r\n    }\r\n    if (height < heights.sand + 1.0)\r\n        return 1 + 2 * (height - (heights.sand + 0.5));\r\n    let snowMod = 3 + (3 * noise.simplex2(x / 20, y / 20));\r\n    if (height > heights.plainsMax + 5 + snowMod)\r\n        return 4;\r\n    if (height > heights.plainsMax + 3.0 + snowMod)\r\n        return 3 + ((height - (heights.plainsMax + 3.0 + snowMod)) * 0.5);\r\n    let gravelMod = 5 + (5 * noise.simplex2(x / 15, y / 15));\r\n    if (height > mountainMod + gravelMod)\r\n        return 3;\r\n    if (height > mountainMod + gravelMod - 2) {\r\n        return 2 + ((height - (mountainMod + gravelMod - 2)) * 0.5);\r\n    }\r\n    return 2;\r\n}\r\n\r\nexport function getTreeGeometery() : THREE.BufferGeometry {\r\n    const greenColor = new THREE.Color(0x317830);\r\n    const brownColor = new THREE.Color(0x6e3626);\r\n    const geo = new THREE.Geometry();\r\n    const level1 = new THREE.ConeGeometry(0.8,1.6,10);\r\n    level1.faces.forEach(f => f.color.set(greenColor));\r\n    level1.translate(0,3.7,0);\r\n    geo.merge(level1);\r\n    const level2 = new THREE.ConeGeometry(1.0,1.8,10);\r\n    level2.faces.forEach(f => f.color.set(greenColor));\r\n    level2.translate(0,2.9,0);\r\n    geo.merge(level2);\r\n    const level3 = new THREE.ConeGeometry(1.2,2,10);\r\n    level3.faces.forEach(f => f.color.set(greenColor));\r\n    level3.translate(0,2,0);\r\n    geo.merge(level3);\r\n    const trunk = new THREE.CylinderGeometry(0.3,0.3,2);\r\n    trunk.translate(0, -0.0, 0);\r\n    trunk.faces.forEach(f => f.color.set(brownColor));\r\n    geo.merge(trunk);\r\n    let bufferGeo = new THREE.BufferGeometry();\r\n    bufferGeo.fromGeometry(geo);\r\n    return bufferGeo;\r\n}\r\n\r\n// export function isWater(height : number) : boolean {\r\n//     return height < heights.water + 0.55;\r\n// }","import {getGameModel} from \"./ts/game/gamemodel\";\r\nimport { startApplication } from \".\";\r\n\r\nangular.module('delivery', [])\r\n  .controller('deliveryController', ['$interval', function($interval) {\r\n    var sd = this;\r\n\r\n    sd.stats = {\r\n        time : \"\",\r\n        update : function() {\r\n            sd.stats.time = (sd.gameModel.time < 10 ? \"0\" : \"\") + Math.floor(sd.gameModel.time) + \":\" + (Math.floor(60 * (sd.gameModel.time % 1)) < 10 ? \"0\" : \"\") + Math.floor(60 * (sd.gameModel.time % 1));\r\n        }\r\n    }\r\n    \r\n    sd.gameModel = getGameModel();\r\n    sd.menus = {\r\n        settings : false\r\n    }\r\n    sd.hideMenus = function() {\r\n        this.menus.settings = false;\r\n    }\r\n    sd.showMenu = function(name : string) {\r\n        this.hideMenus();\r\n        switch (name) {\r\n            case \"settings\":\r\n                this.menus.settings = true;\r\n                break;\r\n        }\r\n    }\r\n\r\n\r\n    startApplication();\r\n\r\n    $interval(function(){\r\n        sd.stats.update();\r\n    }, 100);\r\n    \r\n  }]);","// add styles\r\nimport './style.css';\r\n// three.js\r\nimport * as THREE from 'three';\r\nimport * as Terrain from './ts/terrain/terrain';\r\nimport * as Camera from './ts/game/camera';\r\nimport { Controls } from './ts/game/controls';\r\nimport { getGameModel } from './ts/game/gamemodel';\r\n\r\nexport function startApplication() {\r\n  const gameModel = getGameModel();\r\n\r\n  // create the scene\r\n  const scene = new THREE.Scene();\r\n\r\n  let terrain = new Terrain.Terrain(scene);\r\n\r\n  // create the camera and controls\r\n  const camera = new Camera.MyCamera(scene);\r\n  const controls = new Controls(camera);\r\n\r\n  const renderer = new THREE.WebGLRenderer({ antialias: false });\r\n  // set size\r\n  renderer.setSize(window.innerWidth, window.innerHeight);\r\n\r\n  let dayColor = new THREE.Color(0x6598ba);\r\n  let nightColor = new THREE.Color(0x001848);\r\n  scene.background = new THREE.Color(0, 0, 0);\r\n\r\n  // add canvas to dom\r\n  document.body.appendChild(renderer.domElement);\r\n\r\n  // setup lights\r\n  let light = new THREE.SpotLight(0xffffdd, 0.6, 100, 0.8, 0.5, 1);\r\n  camera.camera.add(light);\r\n  light.position.set(0, 0, 3);\r\n  light.target = camera.camera;\r\n\r\n  // let ambLight = new THREE.AmbientLight(0x909090, 0.5);\r\n  // scene.add(ambLight);\r\n\r\n  let sunGroup = new THREE.Group();\r\n  scene.add(sunGroup);\r\n\r\n  const sunMax = 0.5;\r\n  const sunLightColor = new THREE.Color(0xEEEEDD);\r\n  const moonLightColor = new THREE.Color(0x303030);\r\n  let dirLight = new THREE.DirectionalLight(sunLightColor, sunMax);\r\n  dirLight.position.y = 2000;\r\n  dirLight.position.z = 1000;\r\n  dirLight.target = camera.camera;\r\n  sunGroup.add(dirLight);\r\n\r\n  var spriteMap = new THREE.TextureLoader().load(\"img/sun.png\");\r\n  var spriteMaterial = new THREE.SpriteMaterial({ map: spriteMap });\r\n  var sunSprite = new THREE.Sprite(spriteMaterial);\r\n  sunSprite.scale.multiplyScalar(900);\r\n  sunGroup.add(sunSprite);\r\n  sunSprite.position.copy(dirLight.position);\r\n\r\n\r\n  var moonMap = new THREE.TextureLoader().load(\"img/moon.png\");\r\n  var moonMaterial = new THREE.SpriteMaterial({ map: moonMap });\r\n  var moonSprite = new THREE.Sprite(moonMaterial);\r\n  moonSprite.scale.multiplyScalar(200);\r\n  moonSprite.position.y = -2000;\r\n  moonSprite.position.z = - 250;\r\n  sunGroup.add(moonSprite);\r\n\r\n  // var jsonLoader = new THREE.ObjectLoader();\r\n  // jsonLoader.load(\"models/tree.json\", addModelToScene);\r\n\r\n  // function addModelToScene(object : THREE.Object3D) {\r\n  //     console.log(object);\r\n  //     scene.add(object);\r\n  //     object.position.set(0,terrain.getHeight(0, 10),10);\r\n\r\n  // }\r\n\r\n  // const sunSpeed = 18000;\r\n  const sunSpeed = 100000;\r\n  const timeFactor = sunSpeed * Math.PI * 2;\r\n  let time = 0;\r\n  function updateSun() {\r\n\r\n    let sinResult = currTime / -sunSpeed;\r\n    sunGroup.rotation.z = sinResult;\r\n    sunGroup.position.x = camera.camera.position.x;\r\n    sunGroup.position.z = camera.camera.position.z;\r\n    sunGroup.position.y = 100;\r\n\r\n    time = 24 * (currTime % timeFactor) / timeFactor;\r\n    time += 12;\r\n    if (time > 24) {\r\n      time -= 24;\r\n    }\r\n    gameModel.time = time;\r\n\r\n    if (time > 4 && time < 20) {\r\n      dirLight.position.copy(sunSprite.position);\r\n      dirLight.color = sunLightColor;\r\n    } else {\r\n      dirLight.position.copy(moonSprite.position);\r\n      dirLight.color = moonLightColor;\r\n    }\r\n\r\n    if (controls.flashLight) {\r\n      light.intensity = 0.6;\r\n    } else {\r\n      light.intensity = 0.0;\r\n    }\r\n    let sunPosition = new THREE.Vector3();\r\n    sunSprite.getWorldPosition(sunPosition);\r\n    let sunlightRatio = 0;\r\n    sunlightRatio = Math.min((sunPosition.y + 200) / 1000, 1);\r\n\r\n    terrain.updateTides(sunPosition.y);\r\n\r\n    (scene.background as THREE.Color).setRGB(\r\n      sunlightRatio * dayColor.r + nightColor.r,\r\n      sunlightRatio * dayColor.g + nightColor.g,\r\n      sunlightRatio * dayColor.b + nightColor.b)\r\n  }\r\n\r\n  var frames = 0;\r\n  var lastUpdate = 0;\r\n  function updateFps() {\r\n    frames++;\r\n    if (frames == 20) {\r\n      // console.log(camera.camera);\r\n      var element = document.getElementById(\"fps\");\r\n      var posX = document.getElementById(\"posX\");\r\n      var posY = document.getElementById(\"posY\");\r\n      var calls = document.getElementById(\"calls\");\r\n      var speed = document.getElementById(\"speed\");\r\n      if (element) {\r\n        var timeDiff = currTime - lastUpdate;\r\n        var timePerFrame = timeDiff / 20;\r\n        var fps = 1000 / timePerFrame;\r\n        element.innerText = Math.round(fps).toString();\r\n        posX.innerText = camera.camera.position.x.toFixed(2);\r\n        posY.innerText = camera.camera.position.z.toFixed(2) + \" z:\" + camera.camera.position.y.toFixed(2);\r\n        calls.innerText = renderer.info.render.calls.toString();\r\n        speed.innerText = controls.currentVehicle.speed.length().toFixed(2).toString();\r\n        lastUpdate = currTime;\r\n        frames = 0;\r\n      }\r\n    }\r\n  }\r\n\r\n\r\n  function animate(): void {\r\n    requestAnimationFrame(animate);\r\n    // setTimeout(animate, 1e3 / 30);\r\n    render();\r\n  }\r\n\r\n  let currTime = 0, lastTime = 0;\r\n\r\n  function render(): void {\r\n\r\n    if (gameModel.settings.rendererSettings.settingsChanged) {\r\n      console.log(\"render settings changed\");\r\n      renderer.setPixelRatio(gameModel.settings.rendererSettings.resolution);\r\n      gameModel.settings.rendererSettings.settingsChanged = false;\r\n    }\r\n\r\n    currTime = Date.now();\r\n    let timeDiff = Math.min((currTime - lastTime) / 1000, 1);\r\n    lastTime = currTime;\r\n    updateSun();\r\n    updateFps();\r\n    terrain.updateChunks(timeDiff, camera.camera);\r\n    controls.handleMovement(timeDiff);\r\n    renderer.render(scene, camera.camera);\r\n  }\r\n\r\n  animate();\r\n\r\n  window.onresize = function () {\r\n    camera.camera.aspect = window.innerWidth / window.innerHeight;\r\n    camera.camera.updateProjectionMatrix();\r\n    renderer.setSize(window.innerWidth, window.innerHeight);\r\n  };\r\n\r\n}\r\n","var api = require(\"!../node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js\");\n            var content = require(\"!!../node_modules/css-loader/dist/cjs.js!./style.css\");\n\n            content = content.__esModule ? content.default : content;\n\n            if (typeof content === 'string') {\n              content = [[module.id, content, '']];\n            }\n\nvar options = {};\n\noptions.insert = \"head\";\noptions.singleton = false;\n\nvar update = api(content, options);\n\n\n\nmodule.exports = content.locals || {};","\"use strict\";\n\nvar isOldIE = function isOldIE() {\n  var memo;\n  return function memorize() {\n    if (typeof memo === 'undefined') {\n      // Test for IE <= 9 as proposed by Browserhacks\n      // @see http://browserhacks.com/#hack-e71d8692f65334173fee715c222cb805\n      // Tests for existence of standard globals is to allow style-loader\n      // to operate correctly into non-standard environments\n      // @see https://github.com/webpack-contrib/style-loader/issues/177\n      memo = Boolean(window && document && document.all && !window.atob);\n    }\n\n    return memo;\n  };\n}();\n\nvar getTarget = function getTarget() {\n  var memo = {};\n  return function memorize(target) {\n    if (typeof memo[target] === 'undefined') {\n      var styleTarget = document.querySelector(target); // Special case to return head of iframe instead of iframe itself\n\n      if (window.HTMLIFrameElement && styleTarget instanceof window.HTMLIFrameElement) {\n        try {\n          // This will throw an exception if access to iframe is blocked\n          // due to cross-origin restrictions\n          styleTarget = styleTarget.contentDocument.head;\n        } catch (e) {\n          // istanbul ignore next\n          styleTarget = null;\n        }\n      }\n\n      memo[target] = styleTarget;\n    }\n\n    return memo[target];\n  };\n}();\n\nvar stylesInDom = [];\n\nfunction getIndexByIdentifier(identifier) {\n  var result = -1;\n\n  for (var i = 0; i < stylesInDom.length; i++) {\n    if (stylesInDom[i].identifier === identifier) {\n      result = i;\n      break;\n    }\n  }\n\n  return result;\n}\n\nfunction modulesToDom(list, options) {\n  var idCountMap = {};\n  var identifiers = [];\n\n  for (var i = 0; i < list.length; i++) {\n    var item = list[i];\n    var id = options.base ? item[0] + options.base : item[0];\n    var count = idCountMap[id] || 0;\n    var identifier = \"\".concat(id, \" \").concat(count);\n    idCountMap[id] = count + 1;\n    var index = getIndexByIdentifier(identifier);\n    var obj = {\n      css: item[1],\n      media: item[2],\n      sourceMap: item[3]\n    };\n\n    if (index !== -1) {\n      stylesInDom[index].references++;\n      stylesInDom[index].updater(obj);\n    } else {\n      stylesInDom.push({\n        identifier: identifier,\n        updater: addStyle(obj, options),\n        references: 1\n      });\n    }\n\n    identifiers.push(identifier);\n  }\n\n  return identifiers;\n}\n\nfunction insertStyleElement(options) {\n  var style = document.createElement('style');\n  var attributes = options.attributes || {};\n\n  if (typeof attributes.nonce === 'undefined') {\n    var nonce = typeof __webpack_nonce__ !== 'undefined' ? __webpack_nonce__ : null;\n\n    if (nonce) {\n      attributes.nonce = nonce;\n    }\n  }\n\n  Object.keys(attributes).forEach(function (key) {\n    style.setAttribute(key, attributes[key]);\n  });\n\n  if (typeof options.insert === 'function') {\n    options.insert(style);\n  } else {\n    var target = getTarget(options.insert || 'head');\n\n    if (!target) {\n      throw new Error(\"Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.\");\n    }\n\n    target.appendChild(style);\n  }\n\n  return style;\n}\n\nfunction removeStyleElement(style) {\n  // istanbul ignore if\n  if (style.parentNode === null) {\n    return false;\n  }\n\n  style.parentNode.removeChild(style);\n}\n/* istanbul ignore next  */\n\n\nvar replaceText = function replaceText() {\n  var textStore = [];\n  return function replace(index, replacement) {\n    textStore[index] = replacement;\n    return textStore.filter(Boolean).join('\\n');\n  };\n}();\n\nfunction applyToSingletonTag(style, index, remove, obj) {\n  var css = remove ? '' : obj.media ? \"@media \".concat(obj.media, \" {\").concat(obj.css, \"}\") : obj.css; // For old IE\n\n  /* istanbul ignore if  */\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = replaceText(index, css);\n  } else {\n    var cssNode = document.createTextNode(css);\n    var childNodes = style.childNodes;\n\n    if (childNodes[index]) {\n      style.removeChild(childNodes[index]);\n    }\n\n    if (childNodes.length) {\n      style.insertBefore(cssNode, childNodes[index]);\n    } else {\n      style.appendChild(cssNode);\n    }\n  }\n}\n\nfunction applyToTag(style, options, obj) {\n  var css = obj.css;\n  var media = obj.media;\n  var sourceMap = obj.sourceMap;\n\n  if (media) {\n    style.setAttribute('media', media);\n  } else {\n    style.removeAttribute('media');\n  }\n\n  if (sourceMap && btoa) {\n    css += \"\\n/*# sourceMappingURL=data:application/json;base64,\".concat(btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap)))), \" */\");\n  } // For old IE\n\n  /* istanbul ignore if  */\n\n\n  if (style.styleSheet) {\n    style.styleSheet.cssText = css;\n  } else {\n    while (style.firstChild) {\n      style.removeChild(style.firstChild);\n    }\n\n    style.appendChild(document.createTextNode(css));\n  }\n}\n\nvar singleton = null;\nvar singletonCounter = 0;\n\nfunction addStyle(obj, options) {\n  var style;\n  var update;\n  var remove;\n\n  if (options.singleton) {\n    var styleIndex = singletonCounter++;\n    style = singleton || (singleton = insertStyleElement(options));\n    update = applyToSingletonTag.bind(null, style, styleIndex, false);\n    remove = applyToSingletonTag.bind(null, style, styleIndex, true);\n  } else {\n    style = insertStyleElement(options);\n    update = applyToTag.bind(null, style, options);\n\n    remove = function remove() {\n      removeStyleElement(style);\n    };\n  }\n\n  update(obj);\n  return function updateStyle(newObj) {\n    if (newObj) {\n      if (newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap) {\n        return;\n      }\n\n      update(obj = newObj);\n    } else {\n      remove();\n    }\n  };\n}\n\nmodule.exports = function (list, options) {\n  options = options || {}; // Force single-tag solution on IE6-9, which has a hard limit on the # of <style>\n  // tags it will allow on a page\n\n  if (!options.singleton && typeof options.singleton !== 'boolean') {\n    options.singleton = isOldIE();\n  }\n\n  list = list || [];\n  var lastIdentifiers = modulesToDom(list, options);\n  return function update(newList) {\n    newList = newList || [];\n\n    if (Object.prototype.toString.call(newList) !== '[object Array]') {\n      return;\n    }\n\n    for (var i = 0; i < lastIdentifiers.length; i++) {\n      var identifier = lastIdentifiers[i];\n      var index = getIndexByIdentifier(identifier);\n      stylesInDom[index].references--;\n    }\n\n    var newLastIdentifiers = modulesToDom(newList, options);\n\n    for (var _i = 0; _i < lastIdentifiers.length; _i++) {\n      var _identifier = lastIdentifiers[_i];\n\n      var _index = getIndexByIdentifier(_identifier);\n\n      if (stylesInDom[_index].references === 0) {\n        stylesInDom[_index].updater();\n\n        stylesInDom.splice(_index, 1);\n      }\n    }\n\n    lastIdentifiers = newLastIdentifiers;\n  };\n};","// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"/* Styles go here. */\\r\\n\\r\\nhtml,\\r\\nbody {\\r\\n  margin: 0;\\r\\n  padding: 0;\\r\\n  font-family: Arial, Helvetica, sans-serif;\\r\\n  background-color: black;\\r\\n  color:#ccc;\\r\\n  user-select: none;\\r\\n}\\r\\n\\r\\ncanvas {\\r\\n  display: block;\\r\\n  position: fixed;\\r\\n  top:0;\\r\\n  left:0;\\r\\n  z-index: -50;\\r\\n}\\r\\n\\r\\ndiv.menu {\\r\\n  position: absolute;\\r\\n  top:50%;\\r\\n  left:50%;\\r\\n  transform: translate(-50%,-50%);\\r\\n  background: rgba(0, 0, 0, 0.8);\\r\\n  padding: 15px;\\r\\n}\\r\\n\\r\\ndiv.menu div.section {\\r\\n  margin:15px 0;\\r\\n}\\r\\n\\r\\ndiv.menu select { \\r\\n  float: right;\\r\\n  margin-left: 15px;\\r\\n}\\r\\n\\r\\ndiv.buttons {\\r\\n  position: absolute;\\r\\n  bottom: 15px;\\r\\n  right: 15px;\\r\\n}\", \"\"]);\n// Exports\nmodule.exports = exports;\n","\"use strict\";\n\n/*\n  MIT License http://www.opensource.org/licenses/mit-license.php\n  Author Tobias Koppers @sokra\n*/\n// css base code, injected by the css-loader\n// eslint-disable-next-line func-names\nmodule.exports = function (useSourceMap) {\n  var list = []; // return the list of modules as css string\n\n  list.toString = function toString() {\n    return this.map(function (item) {\n      var content = cssWithMappingToString(item, useSourceMap);\n\n      if (item[2]) {\n        return \"@media \".concat(item[2], \" {\").concat(content, \"}\");\n      }\n\n      return content;\n    }).join('');\n  }; // import a list of modules into the list\n  // eslint-disable-next-line func-names\n\n\n  list.i = function (modules, mediaQuery, dedupe) {\n    if (typeof modules === 'string') {\n      // eslint-disable-next-line no-param-reassign\n      modules = [[null, modules, '']];\n    }\n\n    var alreadyImportedModules = {};\n\n    if (dedupe) {\n      for (var i = 0; i < this.length; i++) {\n        // eslint-disable-next-line prefer-destructuring\n        var id = this[i][0];\n\n        if (id != null) {\n          alreadyImportedModules[id] = true;\n        }\n      }\n    }\n\n    for (var _i = 0; _i < modules.length; _i++) {\n      var item = [].concat(modules[_i]);\n\n      if (dedupe && alreadyImportedModules[item[0]]) {\n        // eslint-disable-next-line no-continue\n        continue;\n      }\n\n      if (mediaQuery) {\n        if (!item[2]) {\n          item[2] = mediaQuery;\n        } else {\n          item[2] = \"\".concat(mediaQuery, \" and \").concat(item[2]);\n        }\n      }\n\n      list.push(item);\n    }\n  };\n\n  return list;\n};\n\nfunction cssWithMappingToString(item, useSourceMap) {\n  var content = item[1] || ''; // eslint-disable-next-line prefer-destructuring\n\n  var cssMapping = item[3];\n\n  if (!cssMapping) {\n    return content;\n  }\n\n  if (useSourceMap && typeof btoa === 'function') {\n    var sourceMapping = toComment(cssMapping);\n    var sourceURLs = cssMapping.sources.map(function (source) {\n      return \"/*# sourceURL=\".concat(cssMapping.sourceRoot || '').concat(source, \" */\");\n    });\n    return [content].concat(sourceURLs).concat([sourceMapping]).join('\\n');\n  }\n\n  return [content].join('\\n');\n} // Adapted from convert-source-map (MIT)\n\n\nfunction toComment(sourceMap) {\n  // eslint-disable-next-line no-undef\n  var base64 = btoa(unescape(encodeURIComponent(JSON.stringify(sourceMap))));\n  var data = \"sourceMappingURL=data:application/json;charset=utf-8;base64,\".concat(base64);\n  return \"/*# \".concat(data, \" */\");\n}","export const MyShaders = {\r\n\r\n  TreeVertexShader: `\r\n          #define MYGRASS\r\n          varying vec3 vLightFront;\r\n          varying vec3 vIndirectFront;\r\n          #ifdef DOUBLE_SIDED\r\n              varying vec3 vLightBack;\r\n              varying vec3 vIndirectBack;\r\n          #endif\r\n          #include <common>\r\n          #include <uv_pars_vertex>\r\n          #include <uv2_pars_vertex>\r\n          #include <envmap_pars_vertex>\r\n          #include <bsdfs>\r\n          #include <lights_pars_begin>\r\n          #include <color_pars_vertex>\r\n          #include <fog_pars_vertex>\r\n          #include <morphtarget_pars_vertex>\r\n          #include <skinning_pars_vertex>\r\n          #include <shadowmap_pars_vertex>\r\n          #include <logdepthbuf_pars_vertex>\r\n          #include <clipping_planes_pars_vertex>\r\n\r\n          varying vec3 vUv;\r\n          uniform float time;\r\n          uniform float amp;\r\n          uniform float maxDistance;\r\n          varying float fade;\r\n\r\n          void main() {\r\n\r\n              vUv = position;\r\n      \r\n              #include <uv_vertex>\r\n              #include <uv2_vertex>\r\n              #include <color_vertex>\r\n              #include <beginnormal_vertex>\r\n              #include <morphnormal_vertex>\r\n              #include <skinbase_vertex>\r\n              #include <skinnormal_vertex>\r\n              #include <defaultnormal_vertex>\r\n              #include <begin_vertex>\r\n              #include <morphtarget_vertex>\r\n              #include <skinning_vertex>\r\n              \r\n              vec4 mvPosition = vec4( transformed, 1.0 );\r\n              if (position.y > 1.0) {\r\n                float freq = 0.01;\r\n                float angle = time * freq;\r\n                angle += instanceMatrix[3].x;\r\n                mvPosition.z += cos(angle) * amp * position.y;\r\n              }\r\n\r\n              #ifdef USE_INSTANCING\r\n                mvPosition = instanceMatrix * mvPosition;\r\n              #endif\r\n\r\n              float dist = distance(vec3(mvPosition.x, 0.0, mvPosition.z), vec3(cameraPosition.x, 0.0, cameraPosition.z));\r\n\r\n              mvPosition = modelViewMatrix * mvPosition;              \r\n              gl_Position = projectionMatrix * mvPosition;\r\n              #include <logdepthbuf_vertex>\r\n              #include <clipping_planes_vertex>\r\n              #include <worldpos_vertex>\r\n              #include <envmap_vertex>\r\n              #include <lights_lambert_vertex>\r\n              #include <shadowmap_vertex>\r\n              #include <fog_vertex>\r\n\r\n              fade = 1.0;             \r\n\r\n              if (dist > maxDistance * 0.9) {\r\n                if (dist > maxDistance) {\r\n                  fade = 0.0;\r\n                } else {\r\n                  fade = ((maxDistance - dist) / (maxDistance * 0.1));\r\n                  // fade = 1.0 + (mvPosition.z / maxDistance);\r\n                }\r\n              }\r\n\r\n              // vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\r\n\t            // gl_Position = projectionMatrix * modelViewPosition;\r\n          }\r\n      `,\r\n\r\n  TreeFragmentShader: `\r\n      uniform vec3 diffuse;\r\n      uniform vec3 emissive;\r\n      uniform float opacity;\r\n      varying vec3 vLightFront;\r\n      varying vec3 vIndirectFront;\r\n      #ifdef DOUBLE_SIDED\r\n          varying vec3 vLightBack;\r\n          varying vec3 vIndirectBack;\r\n      #endif\r\n      #include <common>\r\n      #include <packing>\r\n      #include <dithering_pars_fragment>\r\n      #include <color_pars_fragment>\r\n      #include <uv_pars_fragment>\r\n      #include <uv2_pars_fragment>\r\n      #include <map_pars_fragment>\r\n      #include <alphamap_pars_fragment>\r\n      #include <aomap_pars_fragment>\r\n      #include <lightmap_pars_fragment>\r\n      #include <emissivemap_pars_fragment>\r\n      #include <envmap_common_pars_fragment>\r\n      #include <envmap_pars_fragment>\r\n      #include <cube_uv_reflection_fragment>\r\n      #include <bsdfs>\r\n      #include <lights_pars_begin>\r\n      #include <fog_pars_fragment>\r\n      #include <shadowmap_pars_fragment>\r\n      #include <shadowmask_pars_fragment>\r\n      #include <specularmap_pars_fragment>\r\n      #include <logdepthbuf_pars_fragment>\r\n      #include <clipping_planes_pars_fragment>\r\n\r\n      varying vec3 vUv;\r\n      varying float fade;\r\n      \r\n      void main() {\r\n          #include <clipping_planes_fragment>\r\n\r\n          vec4 diffuseColor = vec4( diffuse, opacity );\r\n          ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n          vec3 totalEmissiveRadiance = emissive;\r\n          #include <logdepthbuf_fragment>\r\n          #include <map_fragment>\r\n          #include <color_fragment>\r\n          #include <alphamap_fragment>\r\n          #include <alphatest_fragment>\r\n          #include <specularmap_fragment>\r\n          #include <emissivemap_fragment>\r\n          reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\r\n          #ifdef DOUBLE_SIDED\r\n              reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\r\n          #else\r\n              reflectedLight.indirectDiffuse += vIndirectFront;\r\n          #endif\r\n          #include <lightmap_fragment>\r\n          reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\r\n          #ifdef DOUBLE_SIDED\r\n              reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\r\n          #else\r\n              reflectedLight.directDiffuse = vLightFront;\r\n          #endif\r\n          reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\r\n          #include <aomap_fragment>\r\n          vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\r\n          #include <envmap_fragment>\r\n          if (fade < 1.0) {\r\n            diffuseColor.a = fade;\r\n          }\r\n          gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n          #include <tonemapping_fragment>\r\n          #include <encodings_fragment>\r\n          #include <fog_fragment>\r\n          #include <premultiplied_alpha_fragment>\r\n          #include <dithering_fragment>\r\n      }\r\n    `,\r\n\r\n  GrassVertexShader: `\r\n          #define MYGRASS\r\n          varying vec3 vLightFront;\r\n          varying vec3 vIndirectFront;\r\n          #ifdef DOUBLE_SIDED\r\n              varying vec3 vLightBack;\r\n              varying vec3 vIndirectBack;\r\n          #endif\r\n          #include <common>\r\n          #include <uv_pars_vertex>\r\n          #include <uv2_pars_vertex>\r\n          #include <envmap_pars_vertex>\r\n          #include <bsdfs>\r\n          #include <lights_pars_begin>\r\n          #include <color_pars_vertex>\r\n          #include <fog_pars_vertex>\r\n          #include <morphtarget_pars_vertex>\r\n          #include <skinning_pars_vertex>\r\n          #include <shadowmap_pars_vertex>\r\n          #include <logdepthbuf_pars_vertex>\r\n          #include <clipping_planes_pars_vertex>\r\n\r\n          varying vec3 vUv;\r\n          attribute float tex;\r\n          varying float texFloat;\r\n          uniform float time;\r\n          uniform float amp;\r\n          uniform float maxDistance;\r\n          varying float fade;\r\n\r\n          void main() {\r\n\r\n              vUv = position;\r\n              texFloat = tex;\r\n      \r\n              #include <uv_vertex>\r\n              #include <uv2_vertex>\r\n              #include <color_vertex>\r\n              #include <beginnormal_vertex>\r\n              #include <morphnormal_vertex>\r\n              #include <skinbase_vertex>\r\n              #include <skinnormal_vertex>\r\n              #include <defaultnormal_vertex>\r\n              #include <begin_vertex>\r\n              #include <morphtarget_vertex>\r\n              #include <skinning_vertex>\r\n              \r\n              vec4 mvPosition = vec4( transformed, 1.0 );\r\n              if (position.y > 0.0) {\r\n                float freq = 0.2 * min(max(instanceMatrix[0].x, 0.7), 1.8);\r\n                float angle = ((time * 0.2) + (position.y * 8.0)) * freq;\r\n                angle += instanceMatrix[3].x;\r\n                mvPosition.z += cos(angle) * amp * freq;\r\n              }\r\n\r\n              #ifdef USE_INSTANCING\r\n                mvPosition = instanceMatrix * mvPosition;\r\n              #endif\r\n\r\n              float dist = distance(vec3(mvPosition.x, 0.0, mvPosition.z), vec3(cameraPosition.x, 0.0, cameraPosition.z));\r\n\r\n              mvPosition = modelViewMatrix * mvPosition;              \r\n              gl_Position = projectionMatrix * mvPosition;\r\n              #include <logdepthbuf_vertex>\r\n              #include <clipping_planes_vertex>\r\n              #include <worldpos_vertex>\r\n              #include <envmap_vertex>\r\n              #include <lights_lambert_vertex>\r\n              #include <shadowmap_vertex>\r\n              #include <fog_vertex>\r\n\r\n              fade = 1.0;             \r\n\r\n              if (dist > maxDistance * 0.5) {\r\n                if (dist > maxDistance) {\r\n                  fade = 0.0;\r\n                } else {\r\n                  fade = ((maxDistance - dist) / (maxDistance * 0.5));\r\n                  // fade = 1.0 + (mvPosition.z / maxDistance);\r\n                }\r\n              }\r\n\r\n              // vec4 modelViewPosition = modelViewMatrix * vec4(position, 1.0);\r\n\t            // gl_Position = projectionMatrix * modelViewPosition;\r\n          }\r\n      `,\r\n\r\n  GrassFragmentShader: `\r\n          uniform vec3 diffuse;\r\n          uniform vec3 emissive;\r\n          uniform float opacity;\r\n          varying vec3 vLightFront;\r\n          varying vec3 vIndirectFront;\r\n          #ifdef DOUBLE_SIDED\r\n              varying vec3 vLightBack;\r\n              varying vec3 vIndirectBack;\r\n          #endif\r\n          #include <common>\r\n          #include <packing>\r\n          #include <dithering_pars_fragment>\r\n          #include <color_pars_fragment>\r\n          #include <uv_pars_fragment>\r\n          #include <uv2_pars_fragment>\r\n          #include <map_pars_fragment>\r\n          #include <alphamap_pars_fragment>\r\n          #include <aomap_pars_fragment>\r\n          #include <lightmap_pars_fragment>\r\n          #include <emissivemap_pars_fragment>\r\n          #include <envmap_common_pars_fragment>\r\n          #include <envmap_pars_fragment>\r\n          #include <cube_uv_reflection_fragment>\r\n          #include <bsdfs>\r\n          #include <lights_pars_begin>\r\n          #include <fog_pars_fragment>\r\n          #include <shadowmap_pars_fragment>\r\n          #include <shadowmask_pars_fragment>\r\n          #include <specularmap_pars_fragment>\r\n          #include <logdepthbuf_pars_fragment>\r\n          #include <clipping_planes_pars_fragment>\r\n  \r\n          uniform sampler2D texture1;\r\n          uniform sampler2D texture2;\r\n          uniform sampler2D texture3;\r\n          varying vec3 vUv;\r\n          varying float texFloat;\r\n          varying float fade;\r\n          \r\n          void main() {\r\n              #include <clipping_planes_fragment>\r\n  \r\n              vec4 diffuseColor = vec4(0.0,0.0,0.0,0.0);\r\n\r\n              if (texFloat < 0.3) {\r\n                diffuseColor = texture2D(texture1, 1.6 * vUv.xy + vec2(.51, .51));\r\n              } else if (texFloat > 0.7) {\r\n                diffuseColor = texture2D(texture2, 1.8 * vUv.xy + vec2(.51, .51));\r\n              } else {\r\n                diffuseColor = texture2D(texture3, 1.8 * vUv.xy + vec2(.53, .51));\r\n              }\r\n  \r\n              ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n              vec3 totalEmissiveRadiance = emissive;\r\n              #include <logdepthbuf_fragment>\r\n              #include <map_fragment>\r\n              #include <color_fragment>\r\n              #include <alphamap_fragment>\r\n              #include <alphatest_fragment>\r\n              #include <specularmap_fragment>\r\n              #include <emissivemap_fragment>\r\n              reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\r\n              #ifdef DOUBLE_SIDED\r\n                  reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\r\n              #else\r\n                  reflectedLight.indirectDiffuse += vIndirectFront;\r\n              #endif\r\n              #include <lightmap_fragment>\r\n              reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb );\r\n              #ifdef DOUBLE_SIDED\r\n                  reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\r\n              #else\r\n                  reflectedLight.directDiffuse = vLightFront;\r\n              #endif\r\n              reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( diffuseColor.rgb ) * getShadowMask();\r\n              #include <aomap_fragment>\r\n              vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\r\n              #include <envmap_fragment>\r\n              if (fade < 1.0) {\r\n                diffuseColor.a = fade;\r\n              }\r\n              gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n              #include <tonemapping_fragment>\r\n              #include <encodings_fragment>\r\n              #include <fog_fragment>\r\n              #include <premultiplied_alpha_fragment>\r\n              #include <dithering_fragment>\r\n          }\r\n      `,\r\n\r\n  LandVertexShader: `\r\n          #define MYLAND\r\n          varying vec3 vLightFront;\r\n          varying vec3 vIndirectFront;\r\n          #ifdef DOUBLE_SIDED\r\n              varying vec3 vLightBack;\r\n              varying vec3 vIndirectBack;\r\n          #endif\r\n          #include <common>\r\n          #include <uv_pars_vertex>\r\n          #include <uv2_pars_vertex>\r\n          #include <envmap_pars_vertex>\r\n          #include <bsdfs>\r\n          #include <lights_pars_begin>\r\n          #include <color_pars_vertex>\r\n          #include <fog_pars_vertex>\r\n          #include <morphtarget_pars_vertex>\r\n          #include <skinning_pars_vertex>\r\n          #include <shadowmap_pars_vertex>\r\n          #include <logdepthbuf_pars_vertex>\r\n          #include <clipping_planes_pars_vertex>\r\n          attribute float tex;\r\n          varying vec3 vUv;\r\n          varying float texFloat;\r\n          void main() {\r\n              #include <uv_vertex>\r\n              #include <uv2_vertex>\r\n              #include <color_vertex>\r\n              #include <beginnormal_vertex>\r\n              #include <morphnormal_vertex>\r\n              #include <skinbase_vertex>\r\n              #include <skinnormal_vertex>\r\n              #include <defaultnormal_vertex>\r\n              #include <begin_vertex>\r\n              #include <morphtarget_vertex>\r\n              #include <skinning_vertex>\r\n              #include <project_vertex>\r\n              #include <logdepthbuf_vertex>\r\n              #include <clipping_planes_vertex>\r\n              #include <worldpos_vertex>\r\n              #include <envmap_vertex>\r\n              #include <lights_lambert_vertex>\r\n              #include <shadowmap_vertex>\r\n              #include <fog_vertex>\r\n  \r\n              vUv = position;\r\n              texFloat = tex;\r\n          }\r\n      `,\r\n\r\n  LandFragmentShader: `\r\n          uniform vec3 diffuse;\r\n          uniform vec3 emissive;\r\n          uniform float opacity;\r\n          varying vec3 vLightFront;\r\n          varying vec3 vIndirectFront;\r\n          #ifdef DOUBLE_SIDED\r\n              varying vec3 vLightBack;\r\n              varying vec3 vIndirectBack;\r\n          #endif\r\n          #include <common>\r\n          #include <packing>\r\n          #include <dithering_pars_fragment>\r\n          #include <color_pars_fragment>\r\n          #include <uv_pars_fragment>\r\n          #include <uv2_pars_fragment>\r\n          #include <map_pars_fragment>\r\n          #include <alphamap_pars_fragment>\r\n          #include <aomap_pars_fragment>\r\n          #include <lightmap_pars_fragment>\r\n          #include <emissivemap_pars_fragment>\r\n          #include <envmap_common_pars_fragment>\r\n          #include <envmap_pars_fragment>\r\n          #include <cube_uv_reflection_fragment>\r\n          #include <bsdfs>\r\n          #include <lights_pars_begin>\r\n          #include <fog_pars_fragment>\r\n          #include <shadowmap_pars_fragment>\r\n          #include <shadowmask_pars_fragment>\r\n          #include <specularmap_pars_fragment>\r\n          #include <logdepthbuf_pars_fragment>\r\n          #include <clipping_planes_pars_fragment>\r\n\r\n          uniform sampler2D grassTexture;\r\n          uniform sampler2D sandTexture;\r\n          uniform sampler2D gravelTexture;\r\n          uniform sampler2D snowTexture;\r\n          varying vec3 vUv;\r\n          varying float texFloat;\r\n  \r\n          void main() {\r\n              #include <clipping_planes_fragment>\r\n\r\n              vec4 color = vec4(0.0,0.0,0.0,0.0);\r\n              float tScale = 1.0;\r\n\r\n              if (texFloat > 0.0 && texFloat <= 1.0) {\r\n                color = mix(color, texture2D(sandTexture, vUv.xz * tScale), texFloat);\r\n              }\r\n              if (texFloat > 1.0 && texFloat <= 2.0) {\r\n                color = texture2D(sandTexture, vUv.xz * tScale);\r\n                color = mix(color, texture2D(grassTexture, vUv.xz * tScale), texFloat - 1.0);\r\n              }\r\n              if (texFloat > 2.0 && texFloat <= 3.0) {\r\n                color = texture2D(grassTexture, vUv.xz * tScale);\r\n                color = mix(color, texture2D(gravelTexture, vUv.xz * tScale), texFloat - 2.0);\r\n              }\r\n              if (texFloat > 3.0 && texFloat <= 4.0) {\r\n                color = texture2D(gravelTexture, vUv.xz * tScale);\r\n                color = mix(color, texture2D(snowTexture, vUv.xz * tScale), texFloat - 3.0);\r\n              }\r\n  \r\n              ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n              vec3 totalEmissiveRadiance = emissive;\r\n              #include <logdepthbuf_fragment>\r\n              #include <map_fragment>\r\n              #include <color_fragment>\r\n              #include <alphamap_fragment>\r\n              #include <alphatest_fragment>\r\n              #include <specularmap_fragment>\r\n              #include <emissivemap_fragment>\r\n              //reflectedLight.indirectDiffuse = getAmbientLightIrradiance( ambientLightColor );\r\n              #ifdef DOUBLE_SIDED\r\n                  reflectedLight.indirectDiffuse += ( gl_FrontFacing ) ? vIndirectFront : vIndirectBack;\r\n              #else\r\n                  reflectedLight.indirectDiffuse += vIndirectFront;\r\n              #endif\r\n              #include <lightmap_fragment>\r\n              reflectedLight.indirectDiffuse *= BRDF_Diffuse_Lambert( color.rgb );\r\n              #ifdef DOUBLE_SIDED\r\n                  reflectedLight.directDiffuse = ( gl_FrontFacing ) ? vLightFront : vLightBack;\r\n              #else\r\n                  reflectedLight.directDiffuse = vLightFront;\r\n              #endif\r\n              reflectedLight.directDiffuse *= BRDF_Diffuse_Lambert( color.rgb ) * getShadowMask();\r\n              #include <aomap_fragment>\r\n              vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\r\n              #include <envmap_fragment>\r\n              gl_FragColor = vec4( outgoingLight, color.a );\r\n              #include <tonemapping_fragment>\r\n              #include <encodings_fragment>\r\n              #include <fog_fragment>\r\n              #include <premultiplied_alpha_fragment>\r\n              #include <dithering_fragment>\r\n          }\r\n      `,\r\n\r\n  WaterVertexShader: `\r\n          #define MYWATER\r\n          varying vec3 vViewPosition;\r\n          #ifndef FLAT_SHADED\r\n              varying vec3 vNormal;\r\n          #endif\r\n          #include <common>\r\n          #include <uv_pars_vertex>\r\n          #include <uv2_pars_vertex>\r\n          #include <displacementmap_pars_vertex>\r\n          #include <envmap_pars_vertex>\r\n          #include <color_pars_vertex>\r\n          #include <fog_pars_vertex>\r\n          #include <morphtarget_pars_vertex>\r\n          #include <skinning_pars_vertex>\r\n          #include <shadowmap_pars_vertex>\r\n          #include <logdepthbuf_pars_vertex>\r\n          #include <clipping_planes_pars_vertex>\r\n  \r\n          varying vec3 vUv;\r\n          uniform float time;\r\n          uniform float amp;\r\n  \r\n          void main() {\r\n              vUv = position; \r\n              #include <uv_vertex>\r\n              #include <uv2_vertex>\r\n              #include <color_vertex>\r\n              #include <beginnormal_vertex>\r\n              #include <morphnormal_vertex>\r\n              #include <skinbase_vertex>\r\n              #include <skinnormal_vertex>\r\n              #include <defaultnormal_vertex>\r\n          #ifndef FLAT_SHADED\r\n              vNormal = normalize( transformedNormal );\r\n          #endif\r\n              #include <begin_vertex>\r\n              #include <morphtarget_vertex>\r\n              #include <skinning_vertex>\r\n              #include <displacementmap_vertex>\r\n              #include <project_vertex>\r\n              #include <logdepthbuf_vertex>\r\n              #include <clipping_planes_vertex>\r\n              vViewPosition = - mvPosition.xyz;\r\n              #include <worldpos_vertex>\r\n              #include <envmap_vertex>\r\n              #include <shadowmap_vertex>\r\n              #include <fog_vertex>\r\n  \r\n            vNormal = normalMatrix * normal;\r\n            //float freq = 0.3;\r\n            //float angle = ((time * 0.2) + (position.x * 8.0))*freq;\r\n            //vUv.z += sin(angle)*amp;\r\n            //vNormal = normalMatrix * normalize(vec3(-amp * freq * cos(angle),0.0,1.0));\r\n            vec4 modelViewPosition = modelViewMatrix * vec4(vUv, 1.0);\r\n            gl_Position = projectionMatrix * modelViewPosition;\r\n          }\r\n      `,\r\n\r\n  WaterFragmentShader: `\r\n          #define MYWATER\r\n          uniform vec3 diffuse;\r\n          uniform vec3 emissive;\r\n          uniform vec3 specular;\r\n          uniform float shininess;\r\n          uniform float opacity;\r\n          #include <common>\r\n          #include <packing>\r\n          #include <dithering_pars_fragment>\r\n          #include <color_pars_fragment>\r\n          #include <uv_pars_fragment>\r\n          #include <uv2_pars_fragment>\r\n          #include <map_pars_fragment>\r\n          #include <alphamap_pars_fragment>\r\n          #include <aomap_pars_fragment>\r\n          #include <lightmap_pars_fragment>\r\n          #include <emissivemap_pars_fragment>\r\n          #include <envmap_common_pars_fragment>\r\n          #include <envmap_pars_fragment>\r\n          #include <cube_uv_reflection_fragment>\r\n          #include <fog_pars_fragment>\r\n          #include <bsdfs>\r\n          #include <lights_pars_begin>\r\n          #include <lights_phong_pars_fragment>\r\n          #include <shadowmap_pars_fragment>\r\n          #include <bumpmap_pars_fragment>\r\n          #include <normalmap_pars_fragment>\r\n          #include <specularmap_pars_fragment>\r\n          #include <logdepthbuf_pars_fragment>\r\n          #include <clipping_planes_pars_fragment>\r\n  \r\n          varying vec3 vPos;\r\n          uniform float time;\r\n          uniform sampler2D texture1;\r\n              varying vec3 vUv;\r\n\r\n          float noise(vec2 n) {\r\n              const vec2 d = vec2(0.0, 1.0);\r\n                vec2 b = floor(n), f = smoothstep(vec2(0.0), vec2(1.0), fract(n));\r\n              return mix(mix(rand(b), rand(b + d.yx), f.x), mix(rand(b + d.xy), rand(b + d.yy), f.x), f.y);\r\n          }\r\n          \r\n          void main() {\r\n            #include <clipping_planes_fragment>\r\n            // compute moving color            \r\n  \r\n            // Compute the ripple effect.\r\n            float mod1 = 16.0;\r\n            float mod2 = 0.4;\r\n            float xoffset = 0.05 * cos(time / 52.0 + mod1 * vUv.y) + 0.09 * cos(time / 65.0 + mod2 * vUv.y);\r\n            float time2 = time + 0.8;\r\n            float yoffset = 0.02 * cos(time2 / 35.0 + mod1 * vUv.x) + 0.07 * cos(time2 / 55.0 + mod2 * vUv.x);\r\n            vec4 diffuseColor = texture2D(texture1, vec2((vUv.x + xoffset) * 0.25, (vUv.y + yoffset) * 0.25));\r\n            // vec4 diffuseColor = texture2D(texture1, vUv.xy + (time  * 0.001));\r\n            \r\n            //vec4 diffuseColor = vec4( diffuse, opacity );\r\n            ReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\r\n            vec3 totalEmissiveRadiance = emissive;\r\n            #include <logdepthbuf_fragment>\r\n            #include <map_fragment>\r\n            #include <color_fragment>\r\n            #include <alphamap_fragment>\r\n            #include <alphatest_fragment>\r\n            #include <specularmap_fragment>\r\n            #include <normal_fragment_begin>\r\n            float nr = noise(vec2(vUv.x + (time * 0.01) + 2.0, vUv.y) * 3.0) - 0.5;\r\n            float nr2 = noise(vec2(vUv.x, vUv.y + (time * 0.01)) * 3.5) - 0.5;\r\n            float res = mix(nr, nr2, 0.5);\r\n            // normal.z = normal.z - 0.1 + (nr * 0.1 * cos((time + (vUv.x + vUv.y) * 10.0)/ 25.0));\r\n            if (res > 0.0) {\r\n              normal.z = normal.z - 0.1 + res * 0.2;\r\n            } else {\r\n              normal.z = normal.z - 0.1;\r\n            }\r\n\r\n            #include <normal_fragment_maps>\r\n            #include <emissivemap_fragment> \r\n            #include <lights_phong_fragment>\r\n            #include <lights_fragment_begin>\r\n            #include <lights_fragment_maps>\r\n            #include <lights_fragment_end>\r\n            #include <aomap_fragment>\r\n            vec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\r\n            #include <envmap_fragment>\r\n            gl_FragColor = vec4( outgoingLight, diffuseColor.a );\r\n            #include <tonemapping_fragment>\r\n            #include <encodings_fragment>\r\n            #include <fog_fragment>\r\n            #include <premultiplied_alpha_fragment>\r\n            #include <dithering_fragment>\r\n            gl_FragColor.a = 0.9;\r\n          }\r\n      `\r\n}","module.exports = function() {\n  return new Worker(__webpack_public_path__ + \"worker.js\");\n};","// three.js\r\nimport * as THREE from 'three';\r\n\r\nexport class MyCamera {\r\n\r\n    public camera : THREE.PerspectiveCamera;\r\n\r\n    constructor(scene : THREE.Scene) {\r\n        this.camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 3000);\r\n        // this.camera.rotation.y = Math.PI;\r\n        this.camera.position.x = 96;\r\n        this.camera.position.y = -100000;\r\n        this.camera.position.z = 33;\r\n        scene.add(this.camera);\r\n    }\r\n    \r\n}","import { MyCamera } from \"./camera\";\r\nimport { Vehicle, Walking, MapMode, Boat } from \"./vehicles\";\r\nimport { getGameModel } from \"./gamemodel\";\r\n\r\nexport class Controls {\r\n\r\n\tpublic flashLight : boolean = true;\r\n\r\n    public KeysPressed = {\r\n        w: false,\r\n        a: false,\r\n        s: false,\r\n        d: false,\r\n        q: false,\r\n        e: false,\r\n\t\tf: false,\r\n\t\tm: false\r\n    }\r\n\r\n\tpublic camera : MyCamera\r\n\tpublic currentVehicle : Vehicle\r\n\tpublic lastVehicle : Vehicle\r\n\tpublic vehicleWalking : Walking\r\n\tpublic vehicleMap : MapMode\r\n\tpublic vehicleBoat : Boat;\r\n\tprivate gameModel = getGameModel();\r\n\r\n\tpublic handleMovement(timeDiff : number) {\r\n\t\tthis.currentVehicle.handleMovement(timeDiff);\r\n\t}\r\n\r\n\tpublic toggleMap() {\r\n\t\tif (this.currentVehicle instanceof MapMode) {\r\n\t\t\tthis.currentVehicle.onDestroy();\r\n\t\t\tthis.currentVehicle = this.lastVehicle;\r\n\t\t\tthis.currentVehicle.onInit();\r\n\t\t} else {\r\n\t\t\tthis.lastVehicle = this.currentVehicle;\r\n\t\t\tthis.currentVehicle.onDestroy();\r\n\t\t\tthis.currentVehicle = this.vehicleMap;\r\n\t\t\tthis.currentVehicle.onInit();\r\n\t\t}\r\n\t}\r\n\r\n    \r\n    constructor(myCamera : MyCamera) {\r\n        let KeysPressed = this.KeysPressed;\r\n\t\tlet that = this;\r\n\t\tthis.camera = myCamera;\r\n\t\tthis.vehicleWalking = new Walking(this.camera.camera, this);\r\n\t\tthis.vehicleMap = new MapMode(this.camera.camera, this);\r\n\t\tthis.vehicleBoat = new Boat(this.camera.camera, this);\r\n\t\tthis.currentVehicle = this.vehicleWalking;\r\n\r\n        window.onblur = function () {\r\n\t\t\tKeysPressed.w = KeysPressed.a = KeysPressed.s = KeysPressed.d = false;\r\n\t\t};\r\n\r\n\t\twindow.onkeydown = function (e: { keyCode: any; }) {\r\n\t\t\tswitch (e.keyCode) {\r\n\t\t\t\tcase 87:\r\n\t\t\t\tcase 38:\r\n\t\t\t\t\tKeysPressed.w = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 65:\r\n\t\t\t\tcase 37:\r\n\t\t\t\t\tKeysPressed.a = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 83:\r\n\t\t\t\tcase 40:\r\n\t\t\t\t\tKeysPressed.s = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 68:\r\n\t\t\t\tcase 39:\r\n\t\t\t\t\tKeysPressed.d = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 81:\r\n\t\t\t\t\tKeysPressed.q = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 69:\r\n\t\t\t\t\tKeysPressed.e = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 70:\r\n\t\t\t\t\tKeysPressed.f = true;\r\n\t\t\t\t\tthat.flashLight = !that.flashLight;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 77:\r\n\t\t\t\t\tKeysPressed.m = true;\r\n\t\t\t\t\tthat.toggleMap();\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n\t\t};\r\n\t\twindow.onkeyup = function (e: { keyCode: any; }) {\r\n\t\t\tswitch (e.keyCode) {\r\n\t\t\t\tcase 87:\r\n\t\t\t\tcase 38:\r\n\t\t\t\t\tKeysPressed.w = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 65:\r\n\t\t\t\tcase 37:\r\n\t\t\t\t\tKeysPressed.a = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 83:\r\n\t\t\t\tcase 40:\r\n\t\t\t\t\tKeysPressed.s = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 68:\r\n\t\t\t\tcase 39:\r\n\t\t\t\t\tKeysPressed.d = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 81:\r\n\t\t\t\t\tKeysPressed.q = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 69:\r\n\t\t\t\t\tKeysPressed.e = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 70:\r\n\t\t\t\t\tKeysPressed.f = false;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 77:\r\n\t\t\t\t\tKeysPressed.m = true;\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\treturn true;\r\n\t\t\t}\r\n\t\t\treturn false;\r\n        };\r\n        \r\n        window.onwheel = function (e: { deltaY: number; }) {\r\n\t\t\tif (that.currentVehicle instanceof MapMode) {\r\n\t\t\t\tthat.currentVehicle.preferredZoom -= e.deltaY * 0.05;\r\n\t\t\t\tif (that.currentVehicle.preferredZoom < 1) {\r\n\t\t\t\t\tthat.currentVehicle.preferredZoom = 1;\r\n\t\t\t\t}\r\n\t\t\t\tif (that.currentVehicle.preferredZoom > 1800) {\r\n\t\t\t\t\tthat.currentVehicle.preferredZoom = 1800;\r\n\t\t\t\t}\r\n\t\t\t} else {\r\n\t\t\t\t// that.camera.camera.rotation.x -= e.deltaY * 0.01;\r\n\t\t\t}\r\n\t\t};\r\n    }\r\n}","import { Controls } from \"./controls\";\r\nimport { getHeight } from \"../terrain/utils\";\r\nimport { isWater } from \"../terrain/terrain\";\r\n\r\nexport class Vehicle {\r\n    speed : THREE.Vector2;\r\n    acceleration : number;\r\n    drag : number;\r\n    turnSpeed : number;\r\n    preferredZoom : number;\r\n    camera : THREE.PerspectiveCamera;\r\n    controls : Controls;\r\n    handleMovement(timeDiff : number) : void {\r\n\r\n    }\r\n    onInit() : void {\r\n\r\n    }\r\n    onDestroy() : void {\r\n\r\n    }\r\n}\r\n\r\nexport class Boat extends Vehicle {\r\n    speed : THREE.Vector2 = new THREE.Vector2();\r\n    constructor(camera : THREE.PerspectiveCamera, controls : Controls) {\r\n       super();\r\n       this.camera = camera;\r\n       this.controls = controls;\r\n    //    var loader = new THREE.GLTFLoader();\r\n\r\n    //     loader.load( 'models/untitled.glb', function ( gltf ) {\r\n    //         console.log(gltf);\r\n    //         // for (let i = 0; i < 1; i++) {\r\n    //             let geometry = gltf.scene.children[0].geometry;\r\n    //             console.log(geometry.toJSON());\r\n    //             let mesh = new THREE.Mesh(geometry, new THREE.MeshLambertMaterial());\r\n    //             mesh.position.z = -20;\r\n    //             // gltf.scene.position.z = -10;\r\n    //             camera.add(mesh);\r\n    //         // }\r\n    //     }, undefined, function ( error ) {\r\n\r\n    //         console.error( error );\r\n\r\n    //     } );\r\n    }\r\n}\r\n\r\nexport class Walking extends Vehicle {\r\n    speed : THREE.Vector2 = new THREE.Vector2();\r\n    acceleration: number = 50;\r\n    drag: number = -6.5;\r\n    turnSpeed: number = 2.5;\r\n    preferredZoom: number = 1.8;\r\n    constructor(camera : THREE.PerspectiveCamera, controls : Controls) {\r\n        super();\r\n        this.camera = camera;\r\n        this.controls = controls;\r\n    }\r\n    handleMovement(timeDiff: number): void {\r\n\r\n        if (this.camera.rotation.x <= 0) {\r\n            this.camera.rotation.x += 2.0 * timeDiff;\r\n            if (this.camera.rotation.x > 0)\r\n                this.camera.rotation.x = 0;\r\n        }\r\n\r\n        var moveVec = new THREE.Vector2(0, 0);\r\n        var height = getHeight(this.camera.position.x, this.camera.position.z);\r\n\r\n        if (this.controls.KeysPressed.w) {\r\n            moveVec.y += 1;\r\n        }\r\n        if (this.controls.KeysPressed.s) {\r\n            moveVec.y -= 1;\r\n        }\r\n        if (this.controls.KeysPressed.q) {\r\n            moveVec.x -= 1;\r\n        }\r\n        if (this.controls.KeysPressed.e) {\r\n            moveVec.x += 1;\r\n        }\r\n        if (this.controls.KeysPressed.a) {\r\n            this.camera.rotation.y += this.turnSpeed * timeDiff;\r\n        }\r\n        if (this.controls.KeysPressed.d) {\r\n            this.camera.rotation.y -= this.turnSpeed * timeDiff;\r\n        }\r\n        moveVec.rotateAround(new THREE.Vector2(), this.camera.rotation.y);\r\n        \r\n        let dragModifier = 1;\r\n        if (isWater(height)) {\r\n            dragModifier = 3;\r\n        } else {\r\n            // let destHeight = getHeight(this.camera.position.x + (moveVec.x * 2), this.camera.position.z + (moveVec.y * 2));\r\n            // let heightDiff = Math.pow(Math.abs(destHeight - height) + 0.5, 2);\r\n            // dragModifier = Math.min(Math.max(1, heightDiff), 3);\r\n        }\r\n        // apply acceleration\r\n        if (moveVec.length() > 0) {\r\n            moveVec.normalize();\r\n            moveVec.multiplyScalar(this.acceleration * timeDiff);\r\n        }\r\n        // apply drag\r\n        let currSpeed = this.speed.length();\r\n        if (currSpeed > 0) {\r\n            let drag =  new THREE.Vector2();\r\n            drag.set(this.speed.x, this.speed.y);\r\n            drag.multiplyScalar(this.drag * timeDiff * dragModifier);\r\n            moveVec.add(drag);\r\n        }\r\n        this.speed.add(moveVec);\r\n        this.camera.position.x += this.speed.x * timeDiff;\r\n        this.camera.position.z -= this.speed.y * timeDiff;\r\n\r\n        height = getHeight(this.camera.position.x, this.camera.position.z);\r\n        if (isWater(height)) {\r\n            height = Math.max(height, 3.5);\r\n        }\r\n        if (this.camera.position.y < height + 0.5)\r\n            this.camera.position.y = height + 0.5;\r\n        \r\n        var diff = (height + this.preferredZoom) - this.camera.position.y;\r\n        if (diff > 0) {\r\n            this.camera.position.y += diff * timeDiff * 5;\r\n        } else {\r\n            this.camera.position.y += diff * timeDiff * 5;\r\n        }\r\n    }\r\n}\r\n\r\nexport class MapMode extends Vehicle {\r\n    speed : THREE.Vector2 = new THREE.Vector2();\r\n    preferredZoom: number = 80;\r\n    ambientLight : THREE.AmbientLight;\r\n    constructor(camera : THREE.PerspectiveCamera, controls : Controls) {\r\n        super();\r\n        this.camera = camera;\r\n        this.controls = controls;\r\n        this.ambientLight = new THREE.AmbientLight(0x606060, 0.5);\r\n    }\r\n    onInit() : void {\r\n        this.camera.add(this.ambientLight);\r\n        // this.camera.rotation.z = this.camera.rotation.y;\r\n        this.camera.rotation.y = 0;\r\n    }\r\n    onDestroy() : void {\r\n        this.camera.remove(this.ambientLight);\r\n        // this.camera.rotation.y = this.camera.rotation.z;\r\n        // this.camera.rotation.z = 0;\r\n    }\r\n    handleMovement(timeDiff : number) {\r\n        if (this.camera.rotation.x >= -1.57) {\r\n            this.camera.rotation.x -= 8.0 * timeDiff;\r\n            if (this.camera.rotation.x < -1.57)\r\n                this.camera.rotation.x = -1.57;\r\n        }\r\n        \r\n        var height = getHeight(this.camera.position.x, this.camera.position.z);\r\n        var diff = (height + this.preferredZoom) - this.camera.position.y;\r\n        if (diff > 0) {\r\n            this.camera.position.y += diff * timeDiff * 5;\r\n        } else {\r\n            this.camera.position.y += diff * timeDiff * 5;\r\n        }\r\n        return;\r\n    }\r\n}"],"sourceRoot":""}